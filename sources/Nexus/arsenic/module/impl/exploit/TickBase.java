package arsenic.module.impl.exploit;

import arsenic.event.bus.Listener;
import arsenic.event.bus.annotations.EventLink;
import arsenic.event.impl.*;
import arsenic.injection.accessor.IMixinMinecraft;
import arsenic.main.Nexus;
import arsenic.module.Module;
import arsenic.module.ModuleCategory;
import arsenic.module.ModuleInfo;
import arsenic.module.impl.combat.Aura;
import arsenic.module.impl.combat.KeepSprint;
import arsenic.module.impl.combat.Velocity;
import arsenic.module.property.PropertyInfo;
import arsenic.module.property.impl.BooleanProperty;
import arsenic.module.property.impl.EnumProperty;
import arsenic.module.property.impl.doubleproperty.DoubleProperty;
import arsenic.module.property.impl.doubleproperty.DoubleValue;
import arsenic.utils.minecraft.MoveUtil;
import arsenic.utils.minecraft.PlayerUtils;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraftforge.fml.common.gameevent.TickEvent;

import java.io.IOException;

@ModuleInfo(name = "TickBase", category = ModuleCategory.Exploit)
public class TickBase extends Module {
    double tick = 0;
    public final EnumProperty<tickMode> tickM = new EnumProperty<tickMode>("Mode:", tickMode.Timer);
    @PropertyInfo(reliesOn = "Mode:", value = "Timer")
    public final DoubleProperty ticks = new DoubleProperty("Ticks", new DoubleValue(1, 20, 10, 1));
    @PropertyInfo(reliesOn = "Mode:", value = "TickOP")
    public final DoubleProperty ticksop = new DoubleProperty("Ticks", new DoubleValue(1, 20, 8, 1));
    @PropertyInfo(reliesOn = "Mode:", value = "TickOP")
    public final DoubleProperty range = new DoubleProperty("Range", new DoubleValue(1, 10, 3, 1));
    @PropertyInfo(reliesOn = "Mode:", value = "TickOP")
    public final DoubleProperty rechargeticks = new DoubleProperty("Rechargeticks", new DoubleValue(1, 800, 3, 1));
    @PropertyInfo(reliesOn = "Mode:", value = "Timer")
    public final DoubleProperty timer1 = new DoubleProperty("Timer1", new DoubleValue(0.1, 20, 10, 0.2));
    @PropertyInfo(reliesOn = "Mode:", value = "Timer")
    public final DoubleProperty timer2 = new DoubleProperty("Timer2", new DoubleValue(0.1, 20, 10, 0.2));
    @PropertyInfo(reliesOn = "Mode:", value = "Timer")
    public final BooleanProperty debug = new BooleanProperty("Debug", false);
    private int counter = -1;
    public boolean freezing;

    private int recharge;

    int attacks = 0;
    boolean stop;

    @Override
    public void onEnable() {
        counter = -1;
        freezing = false;
        if (tickM.getValue() == tickMode.Tick) {
            mc.timer.renderPartialTicks = 0F;
        }
        stop = false;
        attacks = 0;
        tick = 0;
    }

    @Override
    public void onDisable() {
        counter = -1;
        freezing = false;
        if (tickM.getValue() == tickMode.Tick) {
            mc.timer.renderPartialTicks = 0F;
        }
        ((IMixinMinecraft) mc).getTimer().timerSpeed = 1.0F;
    }

    @EventLink
    public final Listener<EventAttack> eventAttackListener = event -> {
        if (mc.thePlayer == null || mc.theWorld == null) {
            return;
        }
        if (tickM.getValue() == tickMode.Timer) {
            if (event.getTarget() instanceof EntityLivingBase && tick == 0) {
                tick = ticks.getValue().getInput();
            }
        }
        if (tickM.getValue() == tickMode.Tick) {
            attacks++;
            if (attacks == 1) {
                try {
                    mc.runTick();
                    mc.runTick();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            if (attacks >= 20) {
                attacks = 0;
            }
        }
    };

    @EventLink
    public final Listener<EventUpdate.Pre> eventUpdateListener = event -> {
        if (mc.thePlayer == null || mc.theWorld == null) {
            return;
        }
        if (tickM.getValue() == tickMode.Timer) {
            if (tick == ticks.getValue().getInput()) {
                if (mc.thePlayer.onGround) {
                    ((IMixinMinecraft) mc).getTimer().timerSpeed = (float) timer1.getValue().getInput();
                    tick--;
                    if (debug.getValue()) {
                        PlayerUtils.addMessageToChat("Tick: " + tick);
                    }
                }
            } else if (tick > 1) {
                if (mc.thePlayer.onGround) {
                    ((IMixinMinecraft) mc).getTimer().timerSpeed = (float) timer2.getValue().getInput();
                    tick--;
                    if (debug.getValue()) {
                        PlayerUtils.addMessageToChat("Tick: " + tick);
                    }
                }
            } else if (tick == 1) {
                ((IMixinMinecraft) mc).getTimer().timerSpeed = 1.0F;
                tick--;
                if (debug.getValue()) {
                    PlayerUtils.addMessageToChat("Tick: " + tick);
                }
            }
        }
        if (tickM.getValue() == tickMode.Tick) {
            if (PlayerUtils.getClosestPlayerWithin(6) == null) {
                attacks = 0;
            }
        }
    };
    @EventLink
    public final Listener<EventGameLoop> eventGameLoopListener = event -> {
        if (mc.thePlayer == null || mc.theWorld == null) {
            return;
        }
        if (tickM.getValue() == tickMode.Timer) {
            if (!mc.thePlayer.onGround) {
                ((IMixinMinecraft) mc).getTimer().timerSpeed = 1.0F;
            }
        }
    };
    @EventLink
    public final Listener<EventUpdate.Post> postListener = event -> {
        if (tickM.getValue() == tickMode.TickOP) {
            if (freezing) {
                mc.thePlayer.posX = mc.thePlayer.lastTickPosX;
                mc.thePlayer.posY = mc.thePlayer.lastTickPosY;
                mc.thePlayer.posZ = mc.thePlayer.lastTickPosZ;
            }
        }
    };

    @EventLink
    public final Listener<EventRender2D> eventRender2DListener = event -> {
        if (mc.thePlayer == null || mc.theWorld == null) {
            return;
        }
        if (freezing && tickM.getValue() == tickMode.TickOP) {
            mc.timer.renderPartialTicks = 0F;
        }
    };

    public enum tickMode {
        Timer,
        Tick,
        TickOP
    }

    public int getExtraTicks() {
        Aura aura = Nexus.getNexus().getModuleManager().getModuleByClass(Aura.class);
        if (counter-- > 0) {
            return -1;
        } else {
            freezing = false;
        }
        if (PlayerUtils.getClosestPlayerWithin(aura.rangerot.getValue().getInput()) != null && recharge == 0 && mc.thePlayer.hurtTime == 0 && mc.thePlayer.getDistanceToEntity(PlayerUtils.getClosestPlayerWithin(aura.rangerot.getValue().getInput())) > range.getValue().getInput() && mc.thePlayer.getDistanceToEntity(PlayerUtils.getClosestPlayerWithin(aura.rangerot.getValue().getInput())) < (range.getValue().getInput() + 1) && mc.thePlayer.hurtTime == 0) {
            recharge = (int) rechargeticks.getValue().getInput();
            return counter = (int) ticksop.getValue().getInput();
        } else if (recharge > 0) {
            recharge--;
        }
        return 0;
    }
}
