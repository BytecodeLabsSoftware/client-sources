package arsenic.module.impl.exploit;

import arsenic.event.bus.Listener;
import arsenic.event.bus.annotations.EventLink;
import arsenic.event.impl.EventAttack;
import arsenic.event.impl.EventPacket;
import arsenic.event.impl.EventRenderWorldLast;
import arsenic.event.impl.EventTick;
import arsenic.module.Module;
import arsenic.module.ModuleCategory;
import arsenic.module.ModuleInfo;
import arsenic.module.property.PropertyInfo;
import arsenic.module.property.impl.BooleanProperty;
import arsenic.module.property.impl.ColourProperty;
import arsenic.module.property.impl.EnumProperty;
import arsenic.module.property.impl.doubleproperty.DoubleProperty;
import arsenic.module.property.impl.doubleproperty.DoubleValue;
import arsenic.utils.minecraft.PacketUtil;
import arsenic.utils.minecraft.PlayerUtils;
import arsenic.utils.render.RenderUtils;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayClient;
import net.minecraft.network.play.server.*;
import net.minecraft.util.Vec3;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.util.concurrent.LinkedBlockingQueue;

@ModuleInfo(name = "Backtrack", category = ModuleCategory.Exploit)
public class Backtrack extends Module {
    public final EnumProperty<bMode> mode = new EnumProperty<>("Mode:", bMode.Auto);
    int tick = 0;
    Entity target = null;
    private LinkedBlockingQueue<Packet<INetHandlerPlayClient>> packetss = new LinkedBlockingQueue<>();
    public static Vec3 realTargetPosition = new Vec3(0, 0, 0);
    @PropertyInfo(reliesOn = "Mode:", value = "Auto")
    public final DoubleProperty maxrange = new DoubleProperty("Max Range", new DoubleValue(0, 6, 3, 0.1));
    @PropertyInfo(reliesOn = "Mode:", value = "Auto")
    public final DoubleProperty ticks = new DoubleProperty("Ticks", new DoubleValue(0, 100, 10, 1));

    public final BooleanProperty render = new BooleanProperty("Render", true);

    @PropertyInfo(reliesOn = "Render", value = "true")
    public ColourProperty color = new ColourProperty("Color:", 0xFF2ECC71);
    public final BooleanProperty Velocity = new BooleanProperty("Delay Velocity", true);
    public final BooleanProperty pingspoof = new BooleanProperty("Ping Spoof", true);
    @EventLink
    public final Listener<EventAttack> eventAttackListener = e -> {
        if (e.getTarget() instanceof EntityPlayer) {
            target = e.getTarget();
        }
    };
    @EventLink
    public final Listener<EventPacket.Incoming.Pre> preListener = e -> {
        if (!PlayerUtils.isPlayerInGame()) {
            return;
        }
        if (target == null) {
            return;
        }
        if (mc.thePlayer.getDistanceToEntity(target) > maxrange.getValue().getInput() && mode.getValue() == bMode.Auto) {
            realTargetPosition = new Vec3(0, 0, 0);
            target = null;
        }
        final Packet<?> packet = e.getPacket();
        if (packet instanceof S18PacketEntityTeleport) {
            S18PacketEntityTeleport s18PacketEntityTeleport = ((S18PacketEntityTeleport) packet);
            if (s18PacketEntityTeleport.getEntityId() == target.getEntityId()) {
                realTargetPosition = new Vec3(s18PacketEntityTeleport.getX() / 32D, s18PacketEntityTeleport.getY() / 32D, s18PacketEntityTeleport.getZ() / 32D);
            }
        }
        if ((tick < ticks.getValue().getInput()) || mode.getValue() == bMode.Manual) {
            if (e.getPacket() instanceof S14PacketEntity || e.getPacket() instanceof S18PacketEntityTeleport) {
                packetss.add(e.getPacket());
                e.cancel();
            }
            if (Velocity.getValue() && (e.getPacket() instanceof S12PacketEntityVelocity)) {
                packetss.add(e.getPacket());
                e.cancel();
            }
            if (pingspoof.getValue() && (e.getPacket() instanceof S03PacketTimeUpdate || e.getPacket() instanceof S00PacketKeepAlive)) {
                packetss.add(e.getPacket());
                e.cancel();
            }
        }
    };

    @EventLink
    public final Listener<EventPacket.OutGoing> outGoingListener = e -> {
        if (!PlayerUtils.isPlayerInGame()) {
            return;
        }
        if (target == null || tick >= ticks.getValue().getInput()) {
            if (mode.getValue() == bMode.Auto) {
                clearPackets();
                tick = 0;
            }
        }
    };

    @EventLink
    public final Listener<EventTick> onTick = e -> {
        if (target == null) {
            return;
        }
        tick++;
    };

    private void clearPackets() {
        if (packetss == null) {
            return;
        }

        while (!packetss.isEmpty()) {
            PacketUtil.handlePacket(packetss.poll());
        }
    }

    @Override
    protected void onDisable() {
        clearPackets();
        super.onDisable();
    }

    // render stuff
    @EventLink
    private final Listener<EventRenderWorldLast> eventRenderWorldLastListener = (event) -> {
        if (target != null && render.getValue()) {
            GlStateManager.pushMatrix();
            GlStateManager.pushAttrib();
            GlStateManager.enableBlend();
            GlStateManager.disableTexture2D();
            GlStateManager.disableLighting();
            GL11.glDepthMask(false);
            Color color = new Color(this.color.getValue());
            GlStateManager.color(color.getRed() / 255.0F, color.getGreen() / 255.0F, color.getBlue() / 255.0F, color.getAlpha());
            RenderUtils.drawBoundingBox(mc.thePlayer.getEntityBoundingBox().offset(-mc.thePlayer.posX, -mc.thePlayer.posY, -mc.thePlayer.posZ).offset(realTargetPosition.xCoord, realTargetPosition.yCoord, realTargetPosition.zCoord));
            GlStateManager.enableTexture2D();
            GlStateManager.enableLighting();
            GlStateManager.disableBlend();
            GL11.glDepthMask(true);
            GlStateManager.popAttrib();
            GlStateManager.popMatrix();
            GlStateManager.resetColor();
        }
    };

    public enum bMode {
        Auto,
        Manual
    }
}