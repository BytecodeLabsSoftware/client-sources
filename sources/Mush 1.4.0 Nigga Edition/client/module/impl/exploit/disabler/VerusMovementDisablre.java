package client.module.impl.exploit.disabler;

import client.Client;
import client.event.Listener;
import client.event.annotations.EventLink;
import client.event.impl.motion.MotionEvent;
import client.event.impl.motion.UpdateEvent;
import client.event.impl.packet.PacketReceiveEvent;
import client.event.impl.packet.PacketSendEvent;
import client.module.impl.exploit.Disabler;
import client.util.chat.ChatUtil;
import client.util.pathfinding.MainPathFinder;
import client.util.pathfinding.Vec3;
import client.util.player.PacketUtil;
import client.util.player.PlayerUtil;
import client.util.player.TimerUtil;
import client.value.Mode;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import tv.twitch.chat.Chat;


import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.UUID;
import java.util.concurrent.ConcurrentLinkedDeque;

public class VerusMovementDisablre extends Mode<Disabler> {
    private boolean teleported;
    private TimerUtil timer = new TimerUtil();
    private final Queue<Packet<?>> packet = new ConcurrentLinkedDeque<>();
    Queue<Packet> packetQueue = new LinkedList<>();


    public VerusMovementDisablre(String name, Disabler parent) {
        super(name, parent);
    }


    @Override
    public void onEnable() {
        super.onEnable();
        packet.clear();
        teleported = false;
        ChatUtil.display(teleported);
    }

    @Override
    public void onDisable() {
        super.onDisable();
    }

    @EventLink()
    public final Listener<UpdateEvent> onUpdate = event -> {

    };

    @EventLink()
    public final Listener<MotionEvent> onMotion = event -> {
        if (timer.hasReached(490L)) {
            timer.reset();

            if (!packet.isEmpty()) {
                PacketUtil.sendPacketWithoutEvent(packet.poll());
            //    ChatUtil.display(teleported);
            }
        }
    };

    @EventLink()
    public final Listener<PacketReceiveEvent> getOnPacketReceive = event -> {
        final Packet p = event.getPacket();
        if (p instanceof S08PacketPlayerPosLook && teleported) {
            final S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) p;

            final ArrayList<Vec3> path = MainPathFinder.computePath(new Vec3(packet.getX(), packet.getY(), packet.getZ()), new Vec3(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ));

            PacketUtil.sendPacketWithoutEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));

            for (final Vec3 vec : path)
                PacketUtil.sendPacketWithoutEvent(new C03PacketPlayer.C06PacketPlayerPosLook(vec.getX(), vec.getY(), vec.getZ(), packet.getYaw(), packet.getPitch(), true));

            event.setCancelled(true);
            teleported = false;
            ChatUtil.display(teleported);
        }
    };
    @EventLink()
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet p = event.getPacket();
        if (mc.thePlayer.ticksExisted < 60 && PlayerUtil.worldChanges > 0) {
            packet.clear();
            teleported = false;
            return;
        }

        if (p instanceof C0BPacketEntityAction) {
            final C0BPacketEntityAction c0B = (C0BPacketEntityAction) p;

            if (c0B.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                if (EntityPlayerSP.serverSprintState) {
                    PacketUtil.sendPacketWithoutEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                    EntityPlayerSP.serverSprintState = false;
                }
                event.setCancelled(true);
            }

            if (c0B.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                event.setCancelled(true);
            }
        }

        if (p instanceof C00PacketKeepAlive || p instanceof C0FPacketConfirmTransaction) {
            packet.add(p);
            event.setCancelled(true);

            if (packet.size() > 300) {
                PacketUtil.sendPacketWithoutEvent(packet.poll());
            }
        }

        if (p instanceof C03PacketPlayer) {
            final C03PacketPlayer c03 = (C03PacketPlayer) p;

            if (mc.thePlayer.ticksExisted % 20 == 0) {
                PacketUtil.sendPacketWithoutEvent(new C18PacketSpectate(UUID.randomUUID()));
                PacketUtil.sendPacketWithoutEvent(new C0CPacketInput(0.98F, 0.98F, false, false));
            }

            if (mc.thePlayer.ticksExisted % 120 == 0) {
                c03.onGround = false;
                // 1 / 64
                // Math ground
                c03.y = -0.015625;

                teleported = true;
                ChatUtil.display(teleported);
            }
            if (mc.thePlayer.ticksExisted > 20 && !mc.thePlayer.capabilities.allowFlying) {
                if (p instanceof C0FPacketConfirmTransaction)
                    event.setCancelled(true);
            //    ChatUtil.display("Doin combat disabler.");
            }
        }




    };


}