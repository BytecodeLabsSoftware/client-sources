package client.module.impl.exploit.disabler;

import client.event.Listener;
import client.event.annotations.EventLink;
import client.event.impl.motion.MotionEvent;
import client.event.impl.motion.StrafeEvent;
import client.event.impl.motion.UpdateEvent;
import client.event.impl.packet.PacketReceiveEvent;
import client.event.impl.packet.PacketSendEvent;
import client.module.impl.exploit.Disabler;
import client.value.Mode;
import io.netty.buffer.Unpooled;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.login.client.C00PacketLoginStart;
import net.minecraft.network.login.client.C01PacketEncryptionResponse;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S03PacketTimeUpdate;
import net.minecraft.network.status.client.C00PacketServerQuery;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

public class MushMC2Disabler extends Mode<Disabler> {
    int i;
    int i1;
    int i2;
    int i3;
    float f1;
    float f2;
    float f3;

    public MushMC2Disabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink()
    public final Listener<UpdateEvent> onUpdate = event -> {
    };

    @EventLink()
    public final Listener<MotionEvent> onMotion = event -> {
        event.rotationYaw = yaw(mc.thePlayer.rotationYaw);
    };

    @EventLink()
    public final Listener<StrafeEvent> onStrafe = event -> {
        event.setRotationYaw(yaw(mc.thePlayer.rotationYaw));
    };

    @EventLink()
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet<?> packet = event.getPacket();
        if (packet instanceof C00Handshake) event.setCancelled(true);
        if (packet instanceof C01PacketEncryptionResponse) event.setCancelled(true);

        if (packet instanceof C03PacketPlayer) {
            C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) packet;
            double d1 = mc.thePlayer.posX;
            double d2 = mc.thePlayer.posY;
            double d3 = mc.thePlayer.posZ;
            if (d1 < 0) {
                d1 = d1 - 1;
            }
            if (d3 < 0) {
                d3 = d3 - 1;
            }
            i = mc.thePlayer.getHorizontalFacing().getIndex();
            f1 = 0.0F;
            f2 = 0.0F;
            f3 = 0.0F;
            if (i == 2) {
                f1 = 0.5F;
                f2 = 0.5F;
                f3 = 0.0F;
            }
            if (i == 3) {
                f1 = 0.5F;
                f2 = 0.5F;
                f3 = 1.0F;
            }
            if (i == 4) {
                f1 = 0.0F;
                f2 = 0.5F;
                f3 = 0.5F;
            }
            if (i == 5) {
                f1 = 1.0F;
                f2 = 0.5F;
                f3 = 0.5F;
            }
            i1 = (int) d1;
            i2 = (int) d2;
            i3 = (int) d3;
            //mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2 - 1, i3), i, null, f1, f2, f3));
            //mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2 - 2, i3), EnumFacing.DOWN.getIndex(), null, 0.5F, 0.0F, 0.5F));
            //mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2, i3), EnumFacing.UP.getIndex(), null, 0.5F, 1.0F, 0.5F));
            //mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2 + 1, i3), EnumFacing.UP.getIndex(), null, 0.5F, 1.0F, 0.5F));
            mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities());
            mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2 + 1, i3), EnumFacing.UP.getIndex(), mc.thePlayer.getHeldItem(), 0.5F, 1.0F, 0.5F));
            mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2 + 0.5, i3), i, mc.thePlayer.getHeldItem(), f1, f2, f3));
            mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i1, i2 - 1, i3), EnumFacing.DOWN.getIndex(), mc.thePlayer.getHeldItem(), 0.5F, 0.0F, 0.5F));
            PlayerCapabilities playerCapabilities = new PlayerCapabilities();
            playerCapabilities.disableDamage = true;
            playerCapabilities.isFlying = true;
            playerCapabilities.allowFlying = true;
            playerCapabilities.isCreativeMode = true;
            playerCapabilities.setFlySpeed(Float.MAX_VALUE);
            playerCapabilities.setPlayerWalkSpeed(Float.MAX_VALUE);
            mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(playerCapabilities));
            C0CPacketInput c0CPacketInput = new C0CPacketInput();
            c0CPacketInput.setStrafeSpeed(Float.MAX_VALUE);
            c0CPacketInput.setForwardSpeed(Float.MAX_VALUE);
            c0CPacketInput.setJumping(true);
            c0CPacketInput.setSneaking(true);
            mc.thePlayer.sendQueue.addToSendQueue(c0CPacketInput);
        }
        if (packet instanceof C07PacketPlayerDigging) {
            C07PacketPlayerDigging c07PacketPlayerDigging = (C07PacketPlayerDigging) packet;
            if (mc.thePlayer.ticksExisted % 2 == 0) {
                c07PacketPlayerDigging.setStatus(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM);
            } else {
                c07PacketPlayerDigging.setStatus(C07PacketPlayerDigging.Action.ABORT_DESTROY_BLOCK);
            }
            c07PacketPlayerDigging.setPosition(new BlockPos(i1, i2 - 1, i3));
            c07PacketPlayerDigging.setFacing(EnumFacing.UP);
        }
        if (packet instanceof C13PacketPlayerAbilities) {
            C13PacketPlayerAbilities c13PacketPlayerAbilities = (C13PacketPlayerAbilities) packet;
            c13PacketPlayerAbilities.setInvulnerable(true);
            c13PacketPlayerAbilities.setFlying(true);
            c13PacketPlayerAbilities.setAllowFlying(true);
            c13PacketPlayerAbilities.setCreativeMode(true);
            c13PacketPlayerAbilities.setFlySpeed(Float.MAX_EXPONENT);
            c13PacketPlayerAbilities.setWalkSpeed(Float.MAX_EXPONENT);
        }
        if (packet instanceof C15PacketClientSettings) {
            C15PacketClientSettings c15PacketClientSettings = (C15PacketClientSettings) packet;
            c15PacketClientSettings.setLang("pt_BR");
            c15PacketClientSettings.setView(110);
        }
        if (packet instanceof C16PacketClientStatus) {
            C16PacketClientStatus c16PacketClientStatus = (C16PacketClientStatus) packet;
            c16PacketClientStatus.setStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN);
        }
        if (packet instanceof C17PacketCustomPayload) {
            C17PacketCustomPayload c17PacketCustomPayload = (C17PacketCustomPayload) packet;
            c17PacketCustomPayload.setData(new PacketBuffer(Unpooled.buffer()).writeString("FML"));
        }
        if (packet instanceof S03PacketTimeUpdate) event.setCancelled(true);

        if (packet instanceof C00PacketServerQuery) event.setCancelled(true);
        if (packet instanceof C01PacketPing) event.setCancelled(true);
        if (mc.thePlayer.getDistance(mc.thePlayer.lastReportedPosX, mc.thePlayer.lastReportedPosY, mc.thePlayer.lastReportedPosZ) <= 8.85) {
            if (packet instanceof C00Handshake) event.setCancelled(true);

            if (packet instanceof C0APacketAnimation) event.setCancelled(true);
            if (packet instanceof C0BPacketEntityAction) event.setCancelled(true);
            if (packet instanceof C0CPacketInput) event.setCancelled(true);
            if (packet instanceof C0DPacketCloseWindow) event.setCancelled(true);
            if (packet instanceof C0FPacketConfirmTransaction) event.setCancelled(true);
            if (packet instanceof C03PacketPlayer) {
                PlayerCapabilities playerCapabilities = new PlayerCapabilities();
                playerCapabilities.disableDamage = true;
                playerCapabilities.isFlying = true;
                playerCapabilities.allowFlying = true;
                playerCapabilities.isCreativeMode = true;
                playerCapabilities.setFlySpeed(Float.MAX_VALUE);
                playerCapabilities.setPlayerWalkSpeed(Float.MAX_VALUE);
                mc.thePlayer.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(playerCapabilities));
                double d0 = mc.thePlayer.posX;
                double d1 = mc.thePlayer.posY;
                double d2 = mc.thePlayer.posZ;
                if (d0 < 0) {
                    d0 = d0 - 1;
                }
                if (d2 < 0) {
                    d2 = d2 - 1;
                }
                int i0 = (int) d0;
                int i1 = (int) d1;
                int i2 = (int) d2;
                mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(i0, i1, i2), 1, null, 0.5F, 1.0F, 0.5F));
            }
            if (packet instanceof C13PacketPlayerAbilities) event.setCancelled(true);
            if (packet instanceof C15PacketClientSettings) event.setCancelled(true);
            if (packet instanceof C16PacketClientStatus) event.setCancelled(true);
            if (packet instanceof C17PacketCustomPayload) event.setCancelled(true);
            if (packet instanceof C18PacketSpectate) event.setCancelled(true);
            if (packet instanceof C19PacketResourcePackStatus) event.setCancelled(true);

            if (packet instanceof S03PacketTimeUpdate) event.setCancelled(true);

            if (packet instanceof C00PacketLoginStart) event.setCancelled(true);
            if (packet instanceof C01PacketEncryptionResponse) event.setCancelled(true);
            if (packet instanceof C00PacketServerQuery) event.setCancelled(true);
            if (packet instanceof C01PacketPing) event.setCancelled(true);
        }
    };

    @EventLink()
    public final Listener<PacketReceiveEvent> onPacketReceive = event -> {
        final Packet<?> packet = event.getPacket();
    };

    private float yaw(final float yaw) {
        if (mc.thePlayer.moveForward == 0.0F && mc.thePlayer.moveStrafing == 0.0F) {
            return yaw;
        }
        if (mc.thePlayer.moveForward == 0.0F && mc.thePlayer.moveStrafing > 0.0F) {
            return yaw - 90.0F;
        }
        if (mc.thePlayer.moveForward == 0.0F && mc.thePlayer.moveStrafing < 0.0F) {
            return yaw + 90.0F;
        }
        if (mc.thePlayer.moveForward > 0.0F && mc.thePlayer.moveStrafing == 0.0F) {
            return yaw;
        }
        if (mc.thePlayer.moveForward > 0.0F && mc.thePlayer.moveStrafing > 0.0F) {
            return yaw - 45.0F;
        }
        if (mc.thePlayer.moveForward > 0.0F && mc.thePlayer.moveStrafing < 0.0F) {
            return yaw + 45.0F;
        }
        if (mc.thePlayer.moveForward < 0.0F && mc.thePlayer.moveStrafing == 0.0F) {
            return yaw + 180.0F;
        }
        if (mc.thePlayer.moveForward < 0.0F && mc.thePlayer.moveStrafing > 0.0F) {
            return yaw - 135.0F;
        }
        if (mc.thePlayer.moveForward < 0.0F && mc.thePlayer.moveStrafing < 0.0F) {
            return yaw - 225.0F;
        }
        return yaw;
    }
}
