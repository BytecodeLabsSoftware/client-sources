package client.module.impl.exploit.disabler;

import client.event.Listener;
import client.event.annotations.EventLink;
import client.event.impl.motion.MotionEvent;
import client.event.impl.motion.UpdateEvent;
import client.event.impl.packet.PacketReceiveEvent;
import client.event.impl.packet.PacketSendEvent;
import client.module.impl.exploit.Disabler;
import client.util.chat.ChatUtil;
import client.util.player.MoveUtil;
import client.value.Mode;

import io.netty.buffer.Unpooled;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.login.client.C00PacketLoginStart;
import net.minecraft.network.login.client.C01PacketEncryptionResponse;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.login.server.S01PacketEncryptionRequest;
import net.minecraft.network.login.server.S02PacketLoginSuccess;
import net.minecraft.network.login.server.S03PacketEnableCompression;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S03PacketTimeUpdate;
import net.minecraft.network.play.server.S3FPacketCustomPayload;
import net.minecraft.network.status.client.C00PacketServerQuery;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import org.apache.commons.lang3.RandomUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class MushMC3Disabler extends Mode<Disabler> {


    public MushMC3Disabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink()
    public final Listener<UpdateEvent> onUpdate = event -> {

    };

    @EventLink()
    public final Listener<MotionEvent> onMotion = event -> {
        for (final EntityPlayer player : mc.theWorld.playerEntities) {
            if (player != mc.thePlayer) {
                //ChatUtil.display(player.getName());
                if (mc.thePlayer.ticksExisted % 120 == 0) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.motionX, -999.0D, mc.thePlayer.motionZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                }
                if (mc.thePlayer.ticksExisted % 20 == 0) {



                        Entity entity = mc.theWorld.loadedEntityList.stream().filter(EntityOtherPlayerMP.class::isInstance).findAny().orElse(null);
                        if (!mc.thePlayer.isSwingInProgress && entity != null)
                            mc.thePlayer.sendQueue.addToSendQueue(new C02PacketUseEntity(entity, C02PacketUseEntity.Action.ATTACK));


                }

            }
        }



        //event.onGround = true; flag on negaivity and jewish
    };

    @EventLink()
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet packet = event.getPacket();
        if (packet instanceof C17PacketCustomPayload) {
            C17PacketCustomPayload c17PacketCustomPayload = (C17PacketCustomPayload) packet;
            c17PacketCustomPayload.setData(new PacketBuffer(Unpooled.buffer()).writeString("LunarClient"));
        }
        if (packet instanceof S03PacketTimeUpdate) event.setCancelled(true);



        if (packet instanceof C0FPacketConfirmTransaction) {
            final C0FPacketConfirmTransaction c0F = (C0FPacketConfirmTransaction) packet;
            c0F.setAccepted(false);
        }
        ;
        //   if (packet instanceof C00Handshake) event.cancelEvent(true); shit packet
        if (packet instanceof C01PacketEncryptionResponse) event.setCancelled(true);



        if (packet instanceof C0FPacketConfirmTransaction) event.setCancelled(true);

        //  if (packet instanceof C00PacketServerQuery) event.cancelEvent(true);
        if (packet instanceof C01PacketPing) event.setCancelled(true);
        //  if (packet instanceof C00PacketLoginStart) event.cancelEvent(true);
        //if (packet instanceof C15PacketClientSettings) event.setCancelled(true);
        if (packet instanceof C14PacketTabComplete) event.setCancelled(true);




    };

    @EventLink()
    public final Listener<PacketReceiveEvent> onPacketReceive = event -> {
        final Packet packet = event.getPacket();
        if (packet instanceof S01PacketEncryptionRequest) event.setCancelled(true);
        if (packet instanceof S03PacketEnableCompression) event.setCancelled(true);
        if (packet instanceof S3FPacketCustomPayload) event.setCancelled(true);
        //if (packet instanceof S07PacketRespawn) event.setCancelled(true);
        if (packet instanceof S00PacketServerInfo) event.setCancelled(true);
        if (packet instanceof S00PacketDisconnect) event.setCancelled(true);
        if (packet instanceof S02PacketLoginSuccess) event.setCancelled(true);
        if (packet instanceof S01PacketPong) event.setCancelled(true);
    };
}