package io.github.liticane.clients.feature.module.impl.exploit;

import io.github.liticane.clients.Client;
import io.github.liticane.clients.feature.event.api.EventListener;
import io.github.liticane.clients.feature.event.api.annotations.SubscribeEvent;
import io.github.liticane.clients.feature.event.impl.motion.PreMotionEvent;
import io.github.liticane.clients.feature.event.impl.other.PacketEvent;
import io.github.liticane.clients.feature.module.Module;
import io.github.liticane.clients.feature.module.impl.combat.Aura;
import io.github.liticane.clients.feature.module.impl.movement.ScaffoldWalk;
import io.github.liticane.clients.feature.property.impl.BooleanProperty;
import io.github.liticane.clients.feature.property.impl.StringProperty;
import io.github.liticane.clients.util.misc.ChatUtil;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.util.BlockPos;

@Module.Info(name = "Disabler", category = Module.Category.EXPLOIT)
public class Disabler extends Module{
    public StringProperty mode = new StringProperty("Mode", this, "Sprint", "Sprint","Verus","Verus Expand");
    public BooleanProperty onlyaura = new BooleanProperty("Only Aura",this,false);
    public BooleanProperty onlyscaffold = new BooleanProperty("Only Scaffold",this,false);
    @SubscribeEvent
    private final EventListener<PreMotionEvent> onmtoion = e -> {
        this.setSuffix(mode.getMode());
        switch (mode.getMode()) {
            case "Verus Expand":
               // ChatUtil.display("asd");
                if(Client.INSTANCE.getModuleManager().get(ScaffoldWalk.class).isToggled()) {
                    e.setOnGround(false);
                    mc.player.connection.sendSilent(new C08PacketPlayerBlockPlacement(new BlockPos(-1, -1, -1), 255, new ItemStack(Items.water_bucket), 0, 0.5f, 0));
                }
               // mc.player.connection.sendSilent(new C08PacketPlayerBlockPlacement(new BlockPos(mc.player.posX, mc.player.posY - 1.5, mc.player.posZ), 1, new ItemStack(Blocks.stone.getItem(mc.world, new BlockPos(-1, -1, -1))), 0, 0.94f, 0));
                break;
        }
    };
    @SubscribeEvent
    private final EventListener<PacketEvent> onpacketo = event -> {
        final Packet<?> p = event.getPacket();
        if(onlyaura.isToggled() && !Client.INSTANCE.getModuleManager().get(Aura.class).isToggled())  {
            return;
        }
        if(onlyscaffold.isToggled() && !Client.INSTANCE.getModuleManager().get(ScaffoldWalk.class).isToggled())  {
            return;
        }
        switch (mode.getMode()) {
            case "Sprint":
                if (p instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction wrapper = (C0BPacketEntityAction) p;

                    if (wrapper.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        ChatUtil.display("st");
                        event.setCancelled(true);
                    }

                    if (wrapper.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                        ChatUtil.display("stp");
                        event.setCancelled(true);
                    }
                }
                break;
            case "Verus Expand":
                if (Client.INSTANCE.getModuleManager().get(ScaffoldWalk.class).isToggled() && p instanceof C08PacketPlayerBlockPlacement) {
                    event.setCancelled(true);
                }
                break;
        }
    };
}
