/**
 * @project Myth
 * @author Skush/Duzey
 * @at 24.08.2022
 */
package dev.myth.features.exploit;

import dev.codeman.eventbus.Handler;
import dev.codeman.eventbus.Listener;
import dev.myth.api.event.EventState;
import dev.myth.api.feature.Feature;
import dev.myth.events.PacketEvent;
import dev.myth.events.UpdateEvent;
import dev.myth.settings.EnumSetting;
import dev.myth.settings.NumberSetting;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;

import java.util.concurrent.CopyOnWriteArrayList;

/**
 * TODO: Make it more Advanced (ROFL KARTOFFEL)
 */

@Feature.Info(name = "Ping Spoof", description = "Spoofs the ping of the player", category = Feature.Category.EXPLOIT)
public class PingSpoofFeature extends Feature {

    /**
     * Settings
     */
    public final EnumSetting<Mode> mode = new EnumSetting<>("Mode", Mode.NORMAL);
    public final NumberSetting ping = new NumberSetting("Ping", 0, 0, 10000, 100).addDependency(() -> mode.getValue() == Mode.NORMAL);

    /**
     * Stuff
     */
    private final CopyOnWriteArrayList<Packet<? extends INetHandler>> packets = new CopyOnWriteArrayList<>();
    private long time;
    private int count;

    @Handler
    public final Listener<UpdateEvent> updateEventListener = event -> {
        if (this.packets.isEmpty() || event.getState() != EventState.PRE) return;

        if (!mode.is(Mode.NORMAL)) return;

        if ((System.currentTimeMillis() - this.time) >= this.ping.getValue()) {
            this.packets.forEach(this::sendPacketUnlogged);
            this.packets.clear();
            this.time = System.currentTimeMillis();
        }
    };

    @Handler
    public final Listener<PacketEvent> packetEventListener = event -> {
        final Packet<? extends INetHandler> packet = event.getPacket();

        if (event.getState() != EventState.SENDING) return;

        if (mode.is(Mode.NORMAL)) {
            if (packet instanceof C0FPacketConfirmTransaction || packet instanceof C00PacketKeepAlive) {
                this.packets.add(packet);
                event.setCancelled(true);
            }
        }

        if (mode.is(Mode.HYPIXEL)) {
            if (packet instanceof C03PacketPlayer) {
                this.packets.add(packet);
                event.setCancelled(true);

                count++;
                doLog("silly " + count);

                if (count > 4) {
                    this.packets.forEach(this::sendPacketUnlogged);
                    this.packets.clear();
                    this.time = System.currentTimeMillis();
                    count = 0;
                    doLog("sexd");
                }
            }
        }
    };

    @Override
    public void onDisable() {
        super.onDisable();

        /** Clear Packet Queue */
        if (!this.packets.isEmpty()) {
            this.packets.forEach(this::sendPacketUnlogged);
            this.packets.clear();
        }

        this.time = System.currentTimeMillis();
    }

    @Override
    public void onEnable() {
        super.onEnable();

        this.time = System.currentTimeMillis();
    }

    public enum Mode {
        NORMAL("Normal"),
        HYPIXEL("Hypixel");

        private final String name;

        Mode(final String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }
    }
}
