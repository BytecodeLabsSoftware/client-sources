/**
 * @project Myth
 * @author Skush/Duzey
 * @at 07.08.2022
 */
package dev.myth.features.exploit.disablers;

import club.antiskid.annotations.Obfuscate;
import dev.codeman.eventbus.Event;
import dev.myth.api.event.EventState;
import dev.myth.api.interfaces.IMethods;
import dev.myth.api.logger.Logger;
import dev.myth.api.utils.MovementUtil;
import dev.myth.api.utils.PlayerUtil;
import dev.myth.api.utils.math.MathUtil;
import dev.myth.events.*;
import dev.myth.features.exploit.PingSpoofFeature;
import dev.myth.features.movement.FlightFeature;
import dev.myth.main.ClientMain;
import dev.myth.managers.FeatureManager;
import net.minecraft.block.Block;
import net.minecraft.block.BlockStainedGlass;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.inventory.Slot;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBed;
import net.minecraft.item.ItemSimpleFoiled;
import net.minecraft.item.ItemStack;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.login.client.C00PacketLoginStart;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

import java.util.*;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

@Obfuscate
public class Disablers implements IMethods {

    public CopyOnWriteArrayList<Packet<? extends INetHandler>> packets = new CopyOnWriteArrayList<>();

    public int setbacks;
    private long lastSetback = 0;
    private long balance = 0, lastTime = 0;

    private double flaggedX, flaggedY, flaggedZ;
    private int offGroundTicks = 0;

    // WatchDog
    final CopyOnWriteArrayList<Packet<? extends INetHandler>> watchdogPackets = new CopyOnWriteArrayList<>();
    final CopyOnWriteArrayList<Packet<? extends INetHandler>> watchdogC0Fs = new CopyOnWriteArrayList<>();

    private ArrayList<C03PacketPlayer> c03s = new ArrayList<>();
    private ArrayList<Packet<?>> pingSpoof = new ArrayList<>();

    /**
     * verus old Disabler
     */
    public void verusOld(final Event e) {
        if (e instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) e;
            if (packetEvent.getPacket() instanceof C0FPacketConfirmTransaction) {
                C0FPacketConfirmTransaction c0fPacketConfirmTransaction = packetEvent.getPacket();
                watchdogPackets.add(c0fPacketConfirmTransaction);
                packetEvent.setCancelled(true);
            }
            if (packetEvent.getPacket() instanceof C03PacketPlayer) {
                C03PacketPlayer c03 = packetEvent.getPacket();
                if (getPlayer().ticksExisted % 40 == 0) {
                    c03.y = -0.911;
                    c03.onGround = false;
                    c03.moving = false;
                }
            }
            if (getPlayer() == null || getPlayer().ticksExisted > 7) return;
            watchdogPackets.clear();
        }

        if (e instanceof UpdateEvent) {
            if (!(System.currentTimeMillis() - lastTime > 500))
                return;
            if (!watchdogPackets.isEmpty()) {
                for (Packet<? extends INetHandler> packet : watchdogPackets)
                    sendPacketUnlogged(packet);
            }
            lastTime = System.currentTimeMillis();
        }
    }

    public void norulesDisabler(final Event e) {
        if(e instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) e;
            if(packetEvent.getPacket() instanceof S08PacketPlayerPosLook && MC.getNetHandler().doneLoadingTerrain) {
                S08PacketPlayerPosLook s08 = packetEvent.getPacket();
                double dist = getPlayer().getDistance(s08.getX(), s08.getY(), s08.getZ());
                if(dist > 8) {
                    doLog("Desync");
                    doLog("Distance: " + dist);
                    return;
                }
                packetEvent.setCancelled(true);
//                sendPacketUnlogged(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                doLog("Silly");
            }
        }
    }

    public void mushMCDisable(final Event e) {
        if(e instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) e;
            if(packetEvent.getPacket() instanceof C03PacketPlayer) {
                C03PacketPlayer c03 = packetEvent.getPacket();

                sendPacket(new C18PacketSpectate(getPlayer().getUniqueID()));
            }
        }
    }

    public void riseDisabler(Event event) {
        if (event instanceof LoadWorldEvent) {
            doLog("cleared");
            c03s.clear();
            pingSpoof.clear();
            offGroundTicks = 0;
        }
        if (event instanceof UpdateEvent) {
            UpdateEvent updateEvent = (UpdateEvent) event;
            if (updateEvent.getState() != EventState.PRE) return;
            if (!getPlayer().onGround) offGroundTicks++;
            else offGroundTicks = 0;
            if (getPlayer().fallDistance < PlayerUtil.getMinFallDistForDamage() && offGroundTicks != 5)
                updateEvent.setOnGround(true);
        }
        if (event instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) event;
            if (packetEvent.getPacket() instanceof C03PacketPlayer) {
                C03PacketPlayer c03PacketPlayer = packetEvent.getPacket();
                sendPacketUnlogged(new C19PacketResourcePackStatus("", C19PacketResourcePackStatus.Action.ACCEPTED));
                sendPacketUnlogged(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
                if (c03PacketPlayer instanceof C03PacketPlayer.C06PacketPlayerPosLook && getPlayer().ticksExisted <= 10) {
                    sendPacketUnlogged(new C03PacketPlayer.C04PacketPlayerPosition(c03PacketPlayer.x, c03PacketPlayer.y, c03PacketPlayer.z, c03PacketPlayer.onGround));
                    event.setCancelled(true);
                } else if (c03s.size() > 3) {
                    c03s.forEach(this::sendPacketUnlogged);
                    c03s.clear();
                } else {
                    c03s.add(c03PacketPlayer);
                    event.setCancelled(true);
                }
            } else if (packetEvent.getPacket() instanceof C0FPacketConfirmTransaction) {
                if (pingSpoof.size() > (getPlayer().isSwingInProgress ? 5 : 8)) {
                    while (!pingSpoof.isEmpty()) {
                        sendPacketUnlogged(pingSpoof.remove(0));
                    }
                }
                pingSpoof.add(packetEvent.getPacket());
                event.setCancelled(true);
            } else if (packetEvent.getPacket() instanceof C00PacketKeepAlive) {
                if (pingSpoof.size() > (getPlayer().isSwingInProgress ? 10 : 15)) {
                    while (!pingSpoof.isEmpty()) {
                        sendPacketUnlogged(pingSpoof.remove(0));
                    }
                }
                pingSpoof.add(packetEvent.getPacket());
                event.setCancelled(true);
            }
        }
    }

    public void omniSprint(final Event e) {
        if (e instanceof UpdateEvent) {
            UpdateEvent event = (UpdateEvent) e;
            event.setSprinting(false);
        }
//        if (e instanceof PacketEvent) {
//            PacketEvent packetEvent = (PacketEvent) e;
//            if (packetEvent.getPacket() instanceof C0BPacketEntityAction) {
//                C0BPacketEntityAction c0bPacketEntityAction = packetEvent.getPacket();
//                if (c0bPacketEntityAction.getAction() == C0BPacketEntityAction.Action.START_SPRINTING) {
//                    packetEvent.setCancelled(true);
//
//                    sendPacketUnlogged(new C0BPacketEntityAction(getPlayer(), C0BPacketEntityAction.Action.START_SPRINTING));
//                    sendPacketUnlogged(new C0BPacketEntityAction(getPlayer(), C0BPacketEntityAction.Action.STOP_SPRINTING));
//                } else if (c0bPacketEntityAction.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
//                    packetEvent.setCancelled(true);
//                }
//            }
//        }
    }

    public void blockDropDisabler(Event event) {
        PingSpoofFeature pingSpoofFeature = ClientMain.INSTANCE.manager.getManager(FeatureManager.class).getFeature(PingSpoofFeature.class);
        if (!pingSpoofFeature.isEnabled()) pingSpoofFeature.toggle();
        pingSpoofFeature.ping.setValue(5000D);
        pingSpoofFeature.mode.setValue(PingSpoofFeature.Mode.NORMAL);
        if (event instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) event;
            if (packetEvent.getPacket() instanceof S08PacketPlayerPosLook) {
                if (MC.getNetHandler() == null || !MC.getNetHandler().doneLoadingTerrain) {
                    return;
                }
                sendPacket(new C0CPacketInput());
                sendPacket(new C0FPacketConfirmTransaction(0, (short) (Math.random() * 100), false));

//                if(ClientMain.INSTANCE.manager.getManager(FeatureManager.class).getFeature(FlightFeature.class).isEnabled()){
//                    packetEvent.setCancelled(true);
//                    S08PacketPlayerPosLook packet = packetEvent.getPacket();
//                    getPlayer().setPosition(packet.getX(), packet.getY(), packet.getZ());
//                    sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
//                }
            }
        }
    }

    public void timerBalance(final Event event) {
        if (event instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) event;
            if (packetEvent.getPacket() instanceof C03PacketPlayer) {
                C03PacketPlayer c03PacketPlayer = packetEvent.getPacket();
                if (!c03PacketPlayer.isMoving() && !c03PacketPlayer.isRotating()) {
                    packetEvent.setCancelled(true);
                }

                if (!packetEvent.isCancelled()) {
                    long time = System.currentTimeMillis();
                    long lastTime = this.lastTime != 0 ? this.lastTime : time - 50;
                    this.lastTime = time;
                    long rate = time - lastTime;

                    balance += 50D;
                    balance -= rate;
                }
            }
            if (packetEvent.getPacket() instanceof S07PacketRespawn || packetEvent.getPacket() instanceof S01PacketJoinGame || packetEvent.getPacket() instanceof C00PacketLoginStart) {
                balance = 0;
                lastTime = System.currentTimeMillis();
            }
        }
        if (event instanceof Render2DEvent) {
            Render2DEvent render2DEvent = (Render2DEvent) event;
            ScaledResolution sr = render2DEvent.getScaledResolution();
            String text = "Timer Balance: " + balance;
            int width = MC.fontRendererObj.getStringWidth(text);
            MC.fontRendererObj.drawStringWithShadow(text, (sr.getScaledWidth() - width) / 2F, sr.getScaledHeight() / 2F + 10, 0xFFFFFFFF);
        }
    }

    public void hypixelFunnyDisabler(final PacketEvent event) {
        if (getPlayer() == null || getWorld() == null) return;

        if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
            event.setCancelled(true);

            C03PacketPlayer.C06PacketPlayerPosLook packet = event.getPacket();

            sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY(), packet.getZ(), packet.isOnGround()));
            sendPacket(new C03PacketPlayer.C05PacketPlayerLook(packet.getYaw(), packet.getPitch(), packet.isOnGround()));
        }
    }

    /**
     * Watchdog
     */
    public void watchdogDisabler(final Event event) {
        if (getPlayer() == null || getWorld() == null) return;

        if (getPlayer().ticksExisted < 100) {
            this.watchdogPackets.clear();
            this.watchdogC0Fs.clear();
            return;
        }

        if (true) {
            if (event instanceof UpdateEvent) {
                if (((UpdateEvent) event).getState() == EventState.PRE) return;
            }

            if (event instanceof PacketEvent) {
                final PacketEvent packetEvent = (PacketEvent) event;
                final Packet<?> packet = packetEvent.getPacket();

                // TODO: Add Setting
                final int c00CancelDelay = 5;

                if (packet instanceof C00PacketKeepAlive) {
                    final C00PacketKeepAlive c00 = (C00PacketKeepAlive) packet;
                    event.setCancelled(getPlayer().ticksExisted % c00CancelDelay == 0);
                    if (getPlayer().ticksExisted % c00CancelDelay == 0)
                        doLog("Disabled Watchdog x2 -> (" + c00CancelDelay + "/" + c00.getKey() + ")");
                }

                if (packet instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction) packet;
                    final int difference = Math.abs(c0fPacketConfirmTransaction.getUid()) - getPlayer().ticksExisted;

                    if (getPlayer().ticksExisted <= 250 && difference >= 1000) {
                        while (watchdogC0Fs.size() < 1) {
                            for (int i = 0; i < 20; i++)
                                sendPacketUnlogged(c0fPacketConfirmTransaction);
                            watchdogC0Fs.add(c0fPacketConfirmTransaction);
                            doLog("Disabled Watchdog -> (" + difference + "/" + c0fPacketConfirmTransaction.getUid() + ")");
                        }
                    } else if (getPlayer().ticksExisted > 250 && watchdogC0Fs.isEmpty())
                        doLog(Logger.Type.WARNING, "Didn't sent any C0F packets!");
                }

                /*if (packet instanceof C03PacketPlayer && getPlayer().ticksExisted <= 200) {
                    sendPacketUnlogged(new C03PacketPlayer.C06PacketPlayerPosLook(((C03PacketPlayer) packet).x, ((C03PacketPlayer) packet).y, ((C03PacketPlayer) packet).z,
                            ((C03PacketPlayer) packet).yaw, ((C03PacketPlayer) packet).pitch, ((C03PacketPlayer) packet).onGround));
                    packetEvent.setCancelled(true);
                }*/
            }
            return;
        }

        if (event instanceof UpdateEvent) {
            if (((UpdateEvent) event).getState() == EventState.PRE) return;

            final int i = getPlayer().ticksExisted;
            final Slot slot = getPlayer().inventoryContainer.getSlot(36 + 8);

            if (slot == null || slot.getStack() == null || !(slot.getStack().getItem() instanceof ItemBed || slot.getStack().getItem() instanceof ItemSimpleFoiled)) {
                final float rofligeValue = 0.0F;
                final BlockPos pos = BlockPos.ORIGIN;

                sendPacketUnlogged(new C09PacketHeldItemChange(8));
                sendPacketUnlogged(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, pos, EnumFacing.DOWN));
                sendPacketUnlogged(new C08PacketPlayerBlockPlacement(pos, Integer.MAX_VALUE, null, rofligeValue, rofligeValue, rofligeValue));
                sendPacketUnlogged(new C09PacketHeldItemChange(getPlayer().inventory.currentItem));
            }

            sendPacketUnlogged(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
            sendPacketUnlogged(new C0CPacketInput(0, 0, true, true));

            if (this.watchdogPackets.size() > 10) {

                this.watchdogPackets.forEach(this::sendPacketUnlogged);
                this.watchdogPackets.clear();

                doLog("Cleared!");
            }
        }
        if (event instanceof PacketEvent) {
            final Packet<? extends INetHandler> packet = ((PacketEvent) event).getPacket();

            if (packet instanceof C0FPacketConfirmTransaction) {
                sendPacketUnlogged(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));

                final PlayerCapabilities playerCapabilities = new PlayerCapabilities();
                sendPacketUnlogged(new C13PacketPlayerAbilities(playerCapabilities));
            }

            if (packet instanceof C00PacketKeepAlive || packet instanceof C03PacketPlayer) {
                watchdogPackets.add(packet);
                event.setCancelled(true);
            }
        }
    }

    /**
     * Morgan
     */
    public void morganDisabler(final PacketEvent event) {
        if (getPlayer() == null || getWorld() == null) return;
        if (event.getPacket() instanceof C0BPacketEntityAction)
            event.setCancelled(true);

//        if(event.getPacket() instanceof S08PacketPlayerPosLook) {
//            final S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook) event.getPacket();
//
//            if(getPlayer().getDistance(packet.getX(), packet.getY(), packet.getZ()) > 8) {
//                return;
//            }
//            event.setCancelled(true);
//
//            sendPacket(new C0CPacketInput());
//            sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
//            sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(getX(), getY(), getZ(), false));
//            sendPacket(new C08PacketPlayerBlockPlacement(new BlockPos(getX(), getY(), getZ()), 255, getPlayer().getHeldItem(), 0, 0, 0));
//            sendPacketUnlogged(new C19PacketResourcePackStatus("", C19PacketResourcePackStatus.Action.ACCEPTED));
//            sendPacketUnlogged(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
//
//        }
    }

    /**
     * Ghostly
     */
    public void ghostlyDisabler(final Event event) {
        sendPacketUnlogged(new C08PacketPlayerBlockPlacement(new BlockPos(getX(), getY(), getZ()), 1, getPlayer().inventory.getItemStack(), 80, 14, 45));
        PlayerCapabilities playerCapabilities = new PlayerCapabilities();
        playerCapabilities.isFlying = true;
        playerCapabilities.isCreativeMode = true;
        playerCapabilities.setFlySpeed(Float.MAX_VALUE);
        playerCapabilities.allowEdit = false;
        sendPacketUnlogged(new C13PacketPlayerAbilities(playerCapabilities));
    }

    /**
     * Verus Lagback Abuse
     */
    public void verusLagBackAbuse(final PacketEvent event) {
        if (ClientMain.INSTANCE.manager.getManager(FeatureManager.class).getFeature(FlightFeature.class).isEnabled()) {
            if (event.getPacket() instanceof C03PacketPlayer) {
                C03PacketPlayer c03 = event.getPacket();

                if (getPlayer().ticksExisted % 4 != 0)
                    return;

                c03.setOnGround(true);
                c03.setY(0.015625);
                c03.setMoving(true);
            }
        }
    }


    /**
     * BlocksMC
     */
    public void blocksMCDisabler(final Event event) {
        if (getPlayer() == null || getWorld() == null) return;

        if (event instanceof UpdateEvent && ((UpdateEvent) event).getState() == EventState.PRE) {
            final long l = ThreadLocalRandom.current().nextLong(1, Long.MAX_VALUE - 1);
            sendPacketUnlogged(new C18PacketSpectate(new UUID(l, l + 1)));

            /** Currently not used */
            sendPacketUnlogged(new C0BPacketEntityAction(getPlayer(), C0BPacketEntityAction.Action.STOP_SNEAKING));
        }
        if (event instanceof PacketEvent) {
            final Block blockUnder = getWorld().getBlockState(new BlockPos(getX(), getY() - 1.0D, getZ())).getBlock();

            final Packet<? extends INetHandler> packet = ((PacketEvent) event).getPacket();

            if (packet instanceof C0BPacketEntityAction)
                event.setCancelled(true);

            if (packet instanceof C03PacketPlayer && !((C03PacketPlayer) packet).isMoving() && !((C03PacketPlayer) packet).isRotating() && !getPlayer().isUsingItem())
                event.setCancelled(true);

            if (packet instanceof C03PacketPlayer)
                sendPacketUnlogged(new C0CPacketInput()); // 😱😱😱

            if (packet instanceof C00PacketKeepAlive && !event.isCancelled()) {
                sendPacketUnlogged(new C00PacketKeepAlive());
                event.setCancelled(true);
            }

            if (blockUnder instanceof BlockStainedGlass && getPlayer().ticksExisted >= 10 && (packet instanceof C03PacketPlayer ||
                    packet instanceof C02PacketUseEntity || packet instanceof C08PacketPlayerBlockPlacement)) {
                event.setCancelled(true);
            }
        }
    }

    /**
     * Hycraft Crash ig
     */
    public void hycraftDisabler(final PacketEvent event) {
        if (event.getPacket() instanceof S2APacketParticles || /*event.getPacket() instanceof S0EPacketSpawnObject || */event.getPacket() instanceof S3EPacketTeams || event.getPacket() instanceof S21PacketChunkData || event.getPacket() instanceof S21PacketChunkData || event.getPacket() instanceof S27PacketExplosion || event.getPacket() instanceof S38PacketPlayerListItem)
            event.setCancelled(true);
        if (event.getPacket() instanceof C0BPacketEntityAction)
            event.setCancelled(true);
        if (event.getPacket() instanceof C03PacketPlayer) {
            C03PacketPlayer c03 = event.getPacket();
            c03.x = getPlayer().lastTickPosX;
            c03.y = getPlayer().lastTickPosY;
//            c03.yaw = Float.MAX_VALUE;
//            c03.pitch = Float.MIN_VALUE;
        }
    }

    /**
     * Universal
     */
    public void respawnDisabler(final Event event) {
        if (event instanceof UpdateEvent) {
            sendPacket(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
        }
    }

    public void redeskyDisabler(final Event event) {
        if (event instanceof PacketEvent) {
            PacketEvent packetEvent = (PacketEvent) event;
            if (packetEvent.getPacket() instanceof S08PacketPlayerPosLook) {
                if (System.currentTimeMillis() - lastSetback < 1000) {
                    setbacks++;
                } else {
                    setbacks = 1;
                }
                lastSetback = System.currentTimeMillis();
            }
            if (packetEvent.getPacket() instanceof C03PacketPlayer) {
                if (setbacks > 3 && System.currentTimeMillis() - lastSetback < 1000) {
                    packets.add(packetEvent.getPacket());
                    packetEvent.setCancelled(true);
                } else {
                    packets.add(packetEvent.getPacket());
                    packetEvent.setCancelled(true);

                    if (packets.isEmpty()) return;
                    packets.forEach(this::sendPacketUnlogged);
                    packets.clear();
                }
            }
        }
        if (event instanceof MoveEvent) {
            MoveEvent moveEvent = (MoveEvent) event;
            if (setbacks > 3 && System.currentTimeMillis() - lastSetback < 1000) {
                moveEvent.setX(getPlayer().motionX = 0);
                moveEvent.setY(getPlayer().motionY = 0);
                moveEvent.setZ(getPlayer().motionZ = 0);
            }
        }
    }

    public void onEnable() {
        lastTime = System.currentTimeMillis();
        this.watchdogPackets.clear();

        c03s.clear();
        pingSpoof.clear();
        offGroundTicks = 0;
    }

    public void onDisable() {
        if (!this.watchdogPackets.isEmpty())
            this.watchdogPackets.forEach(this::sendPacketUnlogged);
        this.watchdogPackets.clear();
    }
}
