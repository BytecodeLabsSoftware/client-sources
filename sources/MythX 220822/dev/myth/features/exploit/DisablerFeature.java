/**
 * @project Myth
 * @author Skush/Duzey
 * @at 06.08.2022
 */
package dev.myth.features.exploit;

import dev.codeman.eventbus.Handler;
import dev.codeman.eventbus.Listener;
import dev.myth.api.feature.Feature;
import dev.myth.events.LoadWorldEvent;
import dev.myth.events.PacketEvent;
import dev.myth.events.Render2DEvent;
import dev.myth.events.UpdateEvent;
import dev.myth.features.exploit.disablers.Disablers;
import dev.myth.settings.EnumSetting;
import dev.myth.settings.ListSetting;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

@Feature.Info(
        name = "Disabler",
        description = "Disables some AntiCheat features",
        category = Feature.Category.EXPLOIT
)
public class DisablerFeature extends Feature {

    /**
     * Settings
     */
    public final ListSetting<DisablerMode> disablerMode = new ListSetting<>("Mode", DisablerMode.RESPAWN);

    /**
     * Types
     */
    public final EnumSetting<VerusType> verusType = new EnumSetting<>("Type", VerusType.LAGBACKABUSE).addDependency(() -> disablerMode.is(DisablerMode.VERUS));

    /**
     * Disabler Modes
     */
    public final Disablers disablers = new Disablers();

    @Handler
    public final Listener<UpdateEvent> updateEventListener = updateEvent -> {
        if (disablerMode.is(DisablerMode.RESPAWN))
            this.disablers.respawnDisabler(updateEvent);
        if (disablerMode.is(DisablerMode.REDESKY))
            this.disablers.redeskyDisabler(updateEvent);
        if (disablerMode.is(DisablerMode.BLOCKSMC))
            this.disablers.blocksMCDisabler(updateEvent);
        if (disablerMode.is(DisablerMode.WATCHDOG))
//            this.disablers.watchdogDisabler(updateEvent);
            this.disablers.riseDisabler(updateEvent);
        if (disablerMode.is(DisablerMode.OMNI_SPRINT))
            this.disablers.omniSprint(updateEvent);
        if(disablerMode.is(DisablerMode.NORULES))
            this.disablers.norulesDisabler(updateEvent);
    };

    @Handler
    public final Listener<Render2DEvent> render2DEventListener = render2DEvent -> {
        if (disablerMode.is(DisablerMode.TIMER_BALANCE))
            this.disablers.timerBalance(render2DEvent);
    };

    @Handler
    public final Listener<LoadWorldEvent> loadWorldEventListener = loadWorldEvent -> {
        if (disablerMode.is(DisablerMode.WATCHDOG))
//            this.disablers.watchdogDisabler(packetEvent);
            this.disablers.riseDisabler(loadWorldEvent);
        if(disablerMode.is(DisablerMode.NORULES))
            this.disablers.norulesDisabler(loadWorldEvent);
    };

    @Handler
    public final Listener<PacketEvent> packetEventListener = packetEvent -> {
        if (disablerMode.is(DisablerMode.OMNI_SPRINT))
            this.disablers.omniSprint(packetEvent);
        if (disablerMode.is(DisablerMode.MUSHMC))
            this.disablers.mushMCDisable(packetEvent);
        if(disablerMode.is(DisablerMode.NORULES))
            this.disablers.norulesDisabler(packetEvent);
        if(disablerMode.is(DisablerMode.BLOCKDROP))
            this.disablers.blockDropDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.TIMER_BALANCE))
            this.disablers.timerBalance(packetEvent);
        if (disablerMode.is(DisablerMode.RESPAWN))
            this.disablers.respawnDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.WATCHDOG))
//            this.disablers.watchdogDisabler(packetEvent);
            this.disablers.riseDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.HYPIXEL_FUNNY))
            this.disablers.hypixelFunnyDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.MORGAN))
            this.disablers.morganDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.HYCRAFT))
            this.disablers.hycraftDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.REDESKY))
            this.disablers.redeskyDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.BLOCKSMC))
            this.disablers.blocksMCDisabler(packetEvent);
        if (disablerMode.is(DisablerMode.VERUS)) {
            switch (verusType.getValue()) {
                case LAGBACKABUSE:
                    this.disablers.verusLagBackAbuse(packetEvent);
                    break;
                case OLDVERUS:
                    this.disablers.verusOld(packetEvent);
                    break;
            }
        }
    };

    @Override
    public String getSuffix() {
        return disablerMode.getValue().isEmpty() ? "no" : disablerMode.getValue().size() == 1 ? disablerMode.getValue().get(0).toString() : disablerMode.getValue().size() + " Enabled";
    }

    public enum DisablerMode {
        RESPAWN("Respawn"),
        TIMER_BALANCE("Timer Balance"),
        OMNI_SPRINT("Omni Sprint"),
        MORGAN("Morgan"),
        REDESKY("Redesky Flag"),
        HYCRAFT("Hycraft"),
        BLOCKSMC("BlocksMC"),
        WATCHDOG("Watchdog"),
        HYPIXEL_FUNNY("Hypixel Funny"),
        BLOCKDROP("BlockDrop"),
        NORULES("NoRules"),
        MUSHMC("MushMC"),
        VERUS("Verus");

        private final String name;

        DisablerMode(final String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return this.name;
        }
    }

    /* Types */

    public enum VerusType {
        LAGBACKABUSE("Lag Abuse"),
        OLDVERUS("Old Verus");

        private final String name;

        VerusType(final String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return this.name;
        }
    }

    @Override
    public void onEnable() {
        super.onEnable();

        this.disablers.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();

        this.disablers.onDisable();
    }
}
