/**
 * @project Myth
 * @author CodeMan
 * @at 08.08.22, 15:36
 */
package dev.myth.features.exploit;

import dev.codeman.eventbus.EventPriority;
import dev.codeman.eventbus.Handler;
import dev.codeman.eventbus.Listener;
import dev.myth.api.event.EventState;
import dev.myth.api.feature.Feature;
import dev.myth.events.PacketEvent;
import dev.myth.events.UpdateEvent;
import dev.myth.settings.EnumSetting;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

@Feature.Info(
        name = "NoRotateSet",
        description = "Makes the server unable to rotate the player",
        category = Feature.Category.EXPLOIT
)
public class NoRotateSetFeature extends Feature {

    public final EnumSetting<Mode> mode = new EnumSetting<>("Mode", Mode.VANILLA);

    private float setYaw, setPitch;
    private boolean shouldSet;

    @Handler
    public final Listener<PacketEvent> packetEventListener = event -> {
        if(MC.thePlayer == null || MC.theWorld == null) return;
        if(event.getState() == EventState.RECEIVING) {
            if(event.getPacket() instanceof S08PacketPlayerPosLook && getPlayer().ticksExisted > 5) {
                S08PacketPlayerPosLook packet = event.getPacket();

                setYaw = packet.getYaw();
                setPitch = packet.getPitch();

                packet.setYaw(MC.thePlayer.rotationYaw);
                packet.setPitch(MC.thePlayer.rotationPitch);

                if(mode.is(Mode.SPOOF)) shouldSet = true;
                if(mode.is(Mode.PACKET)) sendPacket(new C03PacketPlayer.C05PacketPlayerLook(packet.getYaw(), packet.getPitch(), MC.thePlayer.onGround));
            }
        }
    };

    @Handler(EventPriority.LOW)
    public final Listener<UpdateEvent> updateEventListener = event -> {
        if(event.getState() != EventState.PRE) return;

        if(shouldSet) {
            event.setYaw(setYaw);
            event.setPitch(setPitch);
            shouldSet = false;
        }
    };

    public enum Mode {
        VANILLA("Vanilla"),
        SPOOF("Spoof"),
        PACKET("Packet");

        private final String name;

        Mode(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }
    }

}
