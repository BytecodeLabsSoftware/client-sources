package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.network.PacketEvent;
import cc.slack.events.impl.player.MoveEvent;
import cc.slack.events.impl.player.UpdateEvent;
import cc.slack.events.impl.player.WorldEvent;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.Value;
import cc.slack.features.modules.api.settings.impl.BooleanValue;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import cc.slack.features.modules.impl.exploit.disablers.IDisabler;
import cc.slack.features.modules.impl.exploit.disablers.verus.VerusReachDisabler;
import cc.slack.features.modules.impl.exploit.disablers.vulcan.VulcanReachDisabler;
import cc.slack.utils.client.mc;
import cc.slack.utils.network.PacketUtil;
import io.github.nevalackin.radbus.Listen;
import java.util.Objects;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C18PacketSpectate;

@ModuleInfo(
   name = "Disabler",
   category = Category.EXPLOIT
)
public class Disabler extends Module {
   private final ModeValue<IDisabler> mode = new ModeValue(new IDisabler[]{new VerusReachDisabler(), new VulcanReachDisabler()});
   private final BooleanValue verusScaffold = new BooleanValue("Verus Scaffold Check", false);
   private final BooleanValue verusOmniSprint = new BooleanValue("Verus OmniSprint Check", false);
   private final BooleanValue vulcanSprint = new BooleanValue("Vulcan Sprint Check", false);
   private final BooleanValue vulcanLimit = new BooleanValue("Vulcan Scaffold Limit Check", false);
   private final BooleanValue spectator = new BooleanValue("Spectator Spoof", false);
   private final BooleanValue riding = new BooleanValue("Riding Spoof", false);

   public Disabler() {
      this.addSettings(new Value[]{this.mode, this.verusScaffold, this.verusOmniSprint, this.vulcanSprint, this.vulcanLimit, this.spectator, this.riding});
   }

   public void onEnable() {
      ((IDisabler)this.mode.getValue()).onEnable();
      if ((Boolean)this.verusOmniSprint.getValue() && mc.getPlayer().isSprinting()) {
         PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SPRINTING));
      }

   }

   public void onDisable() {
      ((IDisabler)this.mode.getValue()).onDisable();
   }

   @Listen
   public void onMove(MoveEvent event) {
      ((IDisabler)this.mode.getValue()).onMove(event);
   }

   @Listen
   public void onUpdate(UpdateEvent event) {
      if ((Boolean)this.vulcanLimit.getValue()) {
         PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SNEAKING));
         PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.START_SNEAKING));
      }

      ((IDisabler)this.mode.getValue()).onUpdate(event);
   }

   @Listen
   public void onWorld(WorldEvent event) {
      ((IDisabler)this.mode.getValue()).onWorld(event);
   }

   @Listen
   public void onPacket(PacketEvent event) {
      Packet packet = event.getPacket();
      if ((Boolean)this.vulcanSprint.getValue() && packet instanceof C0BPacketEntityAction && Objects.equals(packet, new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.START_SNEAKING))) {
         event.cancel();
      }

      if ((Boolean)this.verusOmniSprint.getValue() && packet instanceof C0BPacketEntityAction) {
         event.cancel();
      }

      if ((Boolean)this.verusScaffold.getValue() && packet instanceof C08PacketPlayerBlockPlacement) {
         ((C08PacketPlayerBlockPlacement)packet).stack = null;
      }

      if ((Boolean)this.spectator.getValue() && packet instanceof C03PacketPlayer) {
         mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.getPlayer().getUniqueID()));
      }

      if ((Boolean)this.riding.getValue() && packet instanceof C03PacketPlayer) {
         mc.getNetHandler().addToSendQueue(new C0CPacketInput(mc.getPlayer().moveStrafing, mc.getPlayer().moveForward, mc.getPlayer().movementInput.jump, mc.getPlayer().movementInput.sneak));
      }

      ((IDisabler)this.mode.getValue()).onPacket(event);
   }
}
