package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.network.PacketEvent;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.Value;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import io.github.nevalackin.radbus.Listen;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import net.minecraft.network.play.client.C01PacketChatMessage;

@ModuleInfo(
   name = "ChatBypass",
   category = Category.EXPLOIT
)
public class ChatBypass extends Module {
   private final ModeValue<String> bypassmode = new ModeValue("Bypass", new String[]{"Universocraft"});

   public ChatBypass() {
      this.addSettings(new Value[]{this.bypassmode});
   }

   @Listen
   public void onPacket(PacketEvent event) {
      String var2 = (String)this.bypassmode.getValue();
      byte var3 = -1;
      switch(var2.hashCode()) {
      case 2796:
         if (var2.equals("XD")) {
            var3 = 1;
         }
         break;
      case 1933730065:
         if (var2.equals("Universocraft")) {
            var3 = 0;
         }
      }

      switch(var3) {
      case 0:
         if (event.getPacket() instanceof C01PacketChatMessage) {
            C01PacketChatMessage c01 = (C01PacketChatMessage)event.getPacket();
            String message = c01.getMessage();
            Stream var10000 = Arrays.stream(new String[]{"/", "!"});
            message.getClass();
            if (!var10000.anyMatch(message::startsWith)) {
               String m = (String)Arrays.stream(message.split(" ")).map((word) -> {
                  return "y" + word;
               }).collect(Collectors.joining(" "));
               c01.setMessage(m);
               event.setPacket(c01);
            }
         }
      case 1:
      default:
      }
   }
}
