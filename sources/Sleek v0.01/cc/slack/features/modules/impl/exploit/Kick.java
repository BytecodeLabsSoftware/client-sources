package cc.slack.features.modules.impl.exploit;

import cc.slack.Slack;
import cc.slack.events.impl.network.PacketEvent;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.Value;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import cc.slack.utils.client.mc;
import cc.slack.utils.network.PacketUtil;
import cc.slack.utils.other.PrintUtil;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S37PacketStatistics;
import net.minecraft.network.play.server.S40PacketDisconnect;

@ModuleInfo(
   name = "Kick",
   category = Category.EXPLOIT
)
public class Kick extends Module {
   private final ModeValue<String> mode = new ModeValue(new String[]{"Quit", "ClientSideQuit", "InvalidPacket", "Self hurt"});

   public Kick() {
      this.addSettings(new Value[]{this.mode});
   }

   public void onEnable() {
      if (mc.getMinecraft().isIntegratedServerRunning()) {
         PrintUtil.message("You can't enable Â§cÂ§l'Kick' Â§ain SinglePlayer.");
      } else {
         String var1 = ((String)this.mode.getValue()).toLowerCase();
         byte var2 = -1;
         switch(var1.hashCode()) {
         case -1749558173:
            if (var1.equals("self hurt")) {
               var2 = 3;
            }
            break;
         case -367089345:
            if (var1.equals("invalidpacket")) {
               var2 = 2;
            }
            break;
         case 3482191:
            if (var1.equals("quit")) {
               var2 = 0;
            }
            break;
         case 296908017:
            if (var1.equals("clientsidequit")) {
               var2 = 1;
            }
         }

         switch(var2) {
         case 0:
            mc.getWorld().sendQuittingDisconnectingPacket();
            break;
         case 1:
            PacketUtil.send(new S40PacketDisconnect());
            break;
         case 2:
            mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, !mc.getPlayer().onGround));
            break;
         case 3:
            mc.getNetHandler().addToSendQueue(new C02PacketUseEntity(mc.getPlayer(), C02PacketUseEntity.Action.ATTACK));
         }

      }
   }

   @Listen
   public void onPacket(PacketEvent event) {
      if (event.getPacket() instanceof S37PacketStatistics) {
         ((Kick)Slack.getInstance().getModuleManager().getInstance(Kick.class)).setToggle(false);
      }

   }
}
