package club.marsh.bloom.impl.mods.exploit.disablers;

import java.util.Deque;
import java.util.concurrent.ConcurrentLinkedDeque;

import com.google.common.eventbus.Subscribe;

import club.marsh.bloom.api.module.Mode;
import club.marsh.bloom.api.module.Module;
import club.marsh.bloom.api.value.NumberValue;
import club.marsh.bloom.api.value.Value;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import club.marsh.bloom.impl.events.PacketEvent;
import club.marsh.bloom.impl.events.UpdateEvent;

public class TransactionDisabler extends Mode {
	
	private final NumberValue delaySetting = new NumberValue("Delay (Ticks)",180, 4, 180,0, () -> (canBeUsed()));
	private final NumberValue packetThreshold = new NumberValue("Threshold (Packets)",20,4,180,0, () -> (canBeUsed()));
	
    private final Deque<Packet<?>> packetDeque = new ConcurrentLinkedDeque<>();
    private int currentTicks;
	
	public TransactionDisabler(Module original, String name, Value mode) {
		super(original, name, mode);
		registerValues(delaySetting,packetThreshold);
	}
	
	@Override
	public void onEnable() {
		packetDeque.clear();
	}

	
	@Subscribe
	public void onPacket(PacketEvent e) {
		if (!this.canBeUsed()) return;
        if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) {
            currentTicks = 0;
            packetDeque.clear();
            return;
        }

        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
            packetDeque.add(e.getPacket());
            e.setCancelled(true);
        }
	}
	
	@Subscribe
	public void onUpdate(UpdateEvent e) {
		if (!this.canBeUsed()) return;
		if (currentTicks >= delaySetting.getValue().intValue()) {
            while (packetDeque.size() > packetThreshold.getValue().intValue())
                mc.getNetHandler().addToSendQueueSilent(packetDeque.poll());;
            currentTicks = 0;
        } else currentTicks++;
	}
	
}
