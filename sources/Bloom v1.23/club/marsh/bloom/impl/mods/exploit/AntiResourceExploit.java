package club.marsh.bloom.impl.mods.exploit;

import org.lwjgl.input.Keyboard;

import com.google.common.eventbus.Subscribe;

import club.marsh.bloom.api.module.Category;
import club.marsh.bloom.api.module.Module;
import club.marsh.bloom.impl.events.PacketEvent;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.S48PacketResourcePackSend;


public class AntiResourceExploit extends Module {
	public static boolean toggled = false;
	public AntiResourceExploit() {
		super("Anti Exploit",Keyboard.KEY_NONE,Category.EXPLOIT);
	}
	@Override
	public void onEnable() {toggled = true;}
	@Override
	public void onDisable() {toggled = false;}


	@Subscribe
	public void onPacket(PacketEvent e) {
		if (e.getPacket() instanceof S48PacketResourcePackSend) {
			/*try {
                String hash = ((S48PacketResourcePackSend) e.getPacket()).getHash();
                String url = ((S48PacketResourcePackSend) e.getPacket()).getURL();
                URI uri = new URI(url);
                String scheme = uri.getScheme();
                boolean isLevelProtocol = "level".equals(scheme);
                if (!"http".equals(scheme) && !"https".equals(scheme) && !isLevelProtocol) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                    e.setCancelled(true);
                    throw new URISyntaxException(url, "Wrong protocol");
                }
                if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                    System.out.println("Malicious server tried to access " + url);
                    EntityPlayerSP thePlayer = Minecraft.getMinecraft().thePlayer;
                    if (thePlayer != null) {
                        thePlayer.addChatMessage(new ChatComponentText(EnumChatFormatting.RED + EnumChatFormatting.BOLD.toString() + "[WARNING] The current server has attempted to be malicious but we have stopped them."));
                    }
                    e.setCancelled(true);
                    throw new URISyntaxException(url, "Invalid levelstorage resourcepack path");
                }
            } catch (URISyntaxException e2) {
                e2.printStackTrace();
                e.setCancelled(true);
            }*/
			String hash = ((S48PacketResourcePackSend) e.getPacket()).getHash();
			mc.thePlayer.sendQueue.addToSendQueue(new C19PacketResourcePackStatus(hash, C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
			e.setCancelled(true);
		}
	}
}
