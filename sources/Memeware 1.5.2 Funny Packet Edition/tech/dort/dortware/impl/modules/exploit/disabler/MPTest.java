package tech.dort.dortware.impl.modules.exploit.disabler;

import com.google.common.eventbus.Subscribe;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C01PacketChatMessage;
import niggerlib.mc.auth.exception.request.RequestException;
import niggerlib.mc.protocol.MinecraftConstants;
import niggerlib.mc.protocol.MinecraftProtocol;
import niggerlib.mc.protocol.data.game.PlayerListEntry;
import niggerlib.mc.protocol.data.game.PlayerListEntryAction;
import niggerlib.mc.protocol.data.message.Message;
import niggerlib.mc.protocol.packet.ingame.client.ClientChatPacket;
import niggerlib.mc.protocol.packet.ingame.client.player.ClientPlayerPositionRotationPacket;
import niggerlib.mc.protocol.packet.ingame.server.*;
import niggerlib.mc.protocol.packet.ingame.server.entity.ServerEntityPositionPacket;
import niggerlib.mc.protocol.packet.ingame.server.entity.player.ServerPlayerPositionRotationPacket;
import niggerlib.mc.protocol.packet.ingame.server.entity.spawn.ServerSpawnPlayerPacket;
import niggerlib.packetlib.Client;
import niggerlib.packetlib.event.session.DisconnectedEvent;
import niggerlib.packetlib.event.session.PacketReceivedEvent;
import niggerlib.packetlib.event.session.SessionAdapter;
import niggerlib.packetlib.tcp.TcpSessionFactory;
import org.apache.commons.lang3.tuple.MutablePair;
import tech.dort.dortware.impl.events.UpdateEvent;
import tech.dort.dortware.impl.modules.exploit.Disabler;
import tech.dort.dortware.impl.utils.networking.PacketUtil;
import tech.dort.dortware.impl.utils.player.ChatUtil;

import javax.vecmath.Vector3d;
import java.net.Proxy;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class MPTest {


    private final int PORT = 25565;
    private final JsonParser PARSER = new JsonParser();
    public final Map<UUID, MutablePair<Integer, String>> entityCache = new HashMap<UUID, MutablePair<Integer, String>>();
    //shitty hacky fix
    public Vector3d clientPos = new Vector3d(0, Double.MIN_VALUE, 0);
    private int playerId;
    public String spectatorIGN;
    public Client client;
    private long loginTime;
    public MineplexStatus currentStatus = MineplexStatus.DISCONNECTED;


    private Client login() {
        currentStatus = MineplexStatus.CONNECTING;
        loginTime = System.currentTimeMillis();
        Disabler disabler = tech.dort.dortware.Client.INSTANCE.getModuleManager().get(Disabler.class);
        String[] userInfo = tech.dort.dortware.Client.getSpectatorAlt();

        MinecraftProtocol protocol;
        try {
            protocol = new MinecraftProtocol(userInfo[0], userInfo[1], false);
        } catch (RequestException e) {
            ChatUtil.displayChatMessage("[MPD] " + "Failed to log into alt...");
            disabler.toggle();
            e.printStackTrace();
            return null;
        }
        spectatorIGN = protocol.getProfile().getName();
        Client client = new Client(disabler.mode.getValue().equals(Disabler.Mode.MINEPLEXEU) ? "eu.mineplex.com" : "us.mineplex.com", PORT, protocol, new TcpSessionFactory());
        client.getSession().setFlag(MinecraftConstants.AUTH_PROXY_KEY, Proxy.NO_PROXY);
        client.getSession().addListener(new SessionAdapter() {

            @Override
            public void packetReceived(PacketReceivedEvent event) {
                if (Minecraft.getMinecraft().thePlayer == null) {
                    client.getSession().disconnect("Disconnected");
                }
                if (event.getPacket() instanceof ServerChatPacket) {
                    Message message = event.<ServerChatPacket>getPacket().getMessage();
                    JsonElement element = message.toJson();
                    try {
                        if (message.getFullText().toLowerCase().contains("join> " + spectatorIGN.toLowerCase())) {
                            ChatUtil.displayChatMessage("[BOT] " + message.getFullText());
                            client.getSession().send(new ClientChatPacket("/spec"));
                        }
                        if (element instanceof JsonObject) {
                            client.getSession().send(new ClientChatPacket(PARSER.parse(element.getAsJsonObject().getAsJsonObject().get("text").getAsString()).getAsJsonObject()
                                    .get("extra").getAsJsonArray().get(0).getAsJsonObject()
                                    .get("extra").getAsJsonArray().get(1).getAsJsonObject().get("clickEvent").getAsJsonObject().get("value").getAsString()));
                            System.out.println("Got party invite.");
                        }
                    } catch (Exception ignored) {
                    }
                }
                if (event.getPacket() instanceof ServerDisconnectPacket) {
                    ChatUtil.displayChatMessage("[\u00a7cMPD\u00a7c] " + "Alt was disconnected: " + ((ServerDisconnectPacket) event.getPacket()).getReason().getFullText());
                }
                if (event.getPacket() instanceof ServerPlayerPositionRotationPacket) {
                    ServerPlayerPositionRotationPacket positionRotationPacket = event.getPacket();
                    clientPos = new Vector3d(positionRotationPacket.getX(), positionRotationPacket.getY(), positionRotationPacket.getZ());
                    for (int i = 0; i < 2; i++)
                        client.getSession().send(new ClientPlayerPositionRotationPacket(true, positionRotationPacket.getX(), positionRotationPacket.getY(), positionRotationPacket.getZ(), 0, 0));
                }

                if (event.getPacket() instanceof ServerEntityPositionPacket) {
                    ServerEntityPositionPacket packet = event.getPacket();
                    if (packet.getEntityId() == playerId) {
                        clientPos = new Vector3d(packet.getMovementX(), packet.getMovementY(), packet.getMovementZ());
                    }
                }
                if (event.getPacket() instanceof ServerJoinGamePacket) {
                    currentStatus = MineplexStatus.CONNECTED;
                    ServerJoinGamePacket joinGamePacket = event.getPacket();
                    playerId = joinGamePacket.getEntityId();
                    new Thread(() -> PacketUtil.sendPacketNoEvent(new C01PacketChatMessage("/party " + spectatorIGN))).start();
                }
                if (event.getPacket() instanceof ServerRespawnPacket) {
                    //TODO handle respawn
                    @SuppressWarnings("unused") ServerRespawnPacket packet = event.getPacket();
                }
                if (event.getPacket() instanceof ServerSpawnPlayerPacket) {
                    ServerSpawnPlayerPacket packet = event.getPacket();
                    if (packet.getEntityId() == playerId) {
                        clientPos = new Vector3d(packet.getX(), packet.getY(), packet.getZ());
                    }
                    entityCache.put(packet.getUUID(), new MutablePair<>(packet.getEntityId(), ""));
                }
                if (event.getPacket() instanceof ServerPlayerListEntryPacket) {
                    ServerPlayerListEntryPacket packet = event.getPacket();
                    if (packet.getAction() == PlayerListEntryAction.ADD_PLAYER) {
                        for (PlayerListEntry entry : packet.getEntries()) {
                            for (UUID set : entityCache.keySet()) {
                                if (set.equals(entry.getProfile().getId())) {
                                    entityCache.get(set).right = entry.getProfile().getName();
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void disconnected(DisconnectedEvent event) {
                currentStatus = MineplexStatus.DISCONNECTED;
                System.out.println("Bot Disconnected: " + Message.fromString(event.getReason()).getFullText());
                entityCache.clear();
                if (event.getCause() != null) {
                    event.getCause().printStackTrace();
                }
            }
        });
        return client;
    }

    public enum MineplexStatus {
        DISCONNECTED("\u00a7cDisconnected"), CONNECTING("\u00a7eConnecting..."), CONNECTED("\u00a7aConnected");

        private final String display;

        MineplexStatus(String display) {
            this.display = display;
        }

        @Override
        public String toString() {
            return display;
        }
    }

    @Subscribe
    public void onUpdate(UpdateEvent event) {
        long timeDiff = System.currentTimeMillis() - loginTime;
        if (tech.dort.dortware.Client.getSpectatorAlt() != null && currentStatus != MineplexStatus.CONNECTED && timeDiff > 5000) {
            client.getSession().disconnect("Disconnected");
            update();
        }

    }

    public void update() {
        entityCache.clear();
        client = login();
        assert client != null;
        client.getSession().connect();
    }
}
