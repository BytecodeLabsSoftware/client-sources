package me.swezedcode.client.module.modules.Exploit;

import org.lwjgl.input.Keyboard;

import com.darkmagician6.eventapi.EventListener;

import me.swezedcode.client.module.ModCategory;
import me.swezedcode.client.module.Module;
import me.swezedcode.client.utils.events.EventPreMotionUpdates;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.C03PacketPlayer;

public class Phase extends Module {

	public Phase() {
		super("Phase", Keyboard.KEY_X, 0xFF9C1A45, ModCategory.Exploit);
	}

	@EventListener
	public void onUpdate(EventPreMotionUpdates e) {
		double multiplier = 0.37D;
		if (this.mc.gameSettings.keyBindJump.pressed) {
			if (this.mc.gameSettings.keyBindJump.pressed) {
				mc.thePlayer.setPositionAndUpdate(mc.thePlayer.posX, mc.thePlayer.posY + 0.05, mc.thePlayer.posZ);
			}
			if (this.mc.gameSettings.keyBindJump.pressed) {
				Minecraft.thePlayer.motionY = 0.31D;
			}
			if (this.mc.gameSettings.keyBindJump.pressed) {
				Minecraft.thePlayer.onGround = true;
			}
		}
		mc.thePlayer.noClip = true;
		double mx = Math.cos(Math.toRadians(mc.thePlayer.rotationYaw + 90.0F));
		double mz = Math.sin(Math.toRadians(mc.thePlayer.rotationYaw + 90.0F));
		double x = mc.thePlayer.movementInput.moveForward * multiplier * mx
				+ mc.thePlayer.movementInput.moveStrafe * multiplier * mz;
		double z = mc.thePlayer.movementInput.moveForward * multiplier * mz
				- mc.thePlayer.movementInput.moveStrafe * multiplier * mx;

		multiplier = 0.2D;
		double xOff = mc.thePlayer.movementInput.moveForward * multiplier * mx
				+ mc.thePlayer.movementInput.moveStrafe * multiplier * mz;
		double zOff = mc.thePlayer.movementInput.moveForward * multiplier * mz
				- mc.thePlayer.movementInput.moveStrafe * multiplier * mx;
		if ((mc.thePlayer.isCollidedHorizontally) && (!mc.thePlayer.isOnLadder())) {
			if ((mc.thePlayer.isCollidedHorizontally)) {
				if ((mc.thePlayer.isCollidedHorizontally) && (!mc.thePlayer.isOnLadder())
						&& (!mc.thePlayer.isEntityInsideOpaqueBlock())) {
					mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + x,
							mc.thePlayer.posY, mc.thePlayer.posZ + z, false));
					for (int i = 1; i < 2; i++) {
						mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX,
								3.988465674311579E307D, mc.thePlayer.posZ, false));
					}
					mc.thePlayer.setPosition(mc.thePlayer.posX + x, mc.thePlayer.posY, mc.thePlayer.posZ + z);
					return;
				}
			}

		}
	}

	public void onDisable() {
		mc.timer.timerSpeed = 1f;
		mc.thePlayer.noClip = false;
	}

	public void onEnable() {
	}

}
