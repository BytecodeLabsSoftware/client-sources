package com.polarware.module.impl.exploit.disabler;


import com.polarware.module.impl.exploit.DisablerModule;
import com.polarware.event.bus.Listener;
import com.polarware.event.annotations.EventLink;
import com.polarware.event.impl.motion.PreMotionEvent;
import com.polarware.util.math.MathUtil;
import com.polarware.util.packet.PacketUtil;
import com.polarware.util.player.MoveUtil;
import com.polarware.value.Mode;
import com.polarware.value.impl.BooleanValue;
import com.polarware.value.impl.ModeValue;
import com.polarware.value.impl.NumberValue;
import com.polarware.value.impl.SubMode;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.util.BlockPos;

public class TeleportDisabler extends Mode<DisablerModule> {

    private final ModeValue direction = new ModeValue("Direction", this)
            .add(new SubMode("Up"))
            .add(new SubMode("Down"))
            .add(new SubMode("Horizontal"))
            .setDefault("Up");

    private final NumberValue delay = new NumberValue("Delay", this, 20, 2, 100, 1);
    private final BooleanValue mathGround = new BooleanValue("Math Ground", this, false);
    private final BooleanValue groundState = new BooleanValue("Ground State", this, false);

    public TeleportDisabler(String name, DisablerModule parent) {
        super(name, parent);
    }

    @EventLink()
    public final Listener<PreMotionEvent> onPreMotionEvent = event -> {
        PacketUtil.send(new C08PacketPlayerBlockPlacement(new BlockPos(-1, -1, -1), 255, new ItemStack(Items.water_bucket), 0, 0.5f, 0));
        PacketUtil.send(new C08PacketPlayerBlockPlacement(new BlockPos(mc.thePlayer.posX, mc.thePlayer.posY - 1.5, mc.thePlayer.posZ), 1, new ItemStack(Blocks.stone.getItem(mc.theWorld, new BlockPos(-1, -1, -1))), 0, 0.94f, 0));
        if (mc.thePlayer.ticksExisted % delay.getValue().intValue() == 0) {
            double x = event.getPosX();
            double y = event.getPosY();
            double z = event.getPosZ();

            switch (direction.getValue().getName()) {
                case "Up": {
                    y += MathUtil.getRandom(1024, 2048);
                    break;
                }

                case "Down": {
                    y -= MathUtil.getRandom(1024, 2048);
                    break;
                }

                case "Horizontal": {
                    x += MathUtil.getRandom(1024, 2048);
                    z -= MathUtil.getRandom(1024, 2048);
                    break;
                }
            }

            if (mathGround.getValue()) {
                y = MoveUtil.roundToGround(y);
            }

            PacketUtil.send(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, groundState.getValue()));
        }
    };
}