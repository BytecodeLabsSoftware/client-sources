package com.polarware.module.impl.exploit.disabler;

import com.polarware.component.impl.player.BadPacketsComponent;
import com.polarware.component.impl.player.SelectorDetectionComponent;
import com.polarware.event.annotations.EventLink;
import com.polarware.event.bus.Listener;
import com.polarware.event.impl.motion.PreUpdateEvent;
import com.polarware.event.impl.network.PacketReceiveEvent;
import com.polarware.event.impl.network.PacketSendEvent;
import com.polarware.module.impl.exploit.DisablerModule;
import com.polarware.util.chat.ChatUtil;
import com.polarware.util.packet.PacketUtil;
import com.polarware.value.Mode;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import util.time.StopWatch;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * @author Nyghtfull & Liticane
 * @since 19/12/2023
 */
public class VerusMovementDisabler extends Mode<DisablerModule> {
    private final StopWatch stopwatch = new StopWatch();
    private final ConcurrentLinkedQueue<Packet> packetQueue = new ConcurrentLinkedQueue<>();
    private float verusYaw, verusPitch;
    private final StopWatch timeUntilFlag = new StopWatch();

    public VerusMovementDisabler(String name, DisablerModule parent) {
        super(name, parent);
    }

    @Override
    public void onEnable() {
        mc.timer.timerSpeed = 1f;
        timeUntilFlag.reset();
        packetQueue.clear();
        stopwatch.reset();
        PacketUtil.send(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
        super.onEnable();
    }
    @EventLink()
    public final Listener<PreUpdateEvent> onPreUpdate = event -> {
        // mc.timer.timerSpeed = 1;
        if (mc.thePlayer.ticksExisted % 33 == 0) {
            if (!packetQueue.isEmpty()) {
                PacketUtil.sendNoEvent(packetQueue.poll());
                //   PacketUtil.sendSilent(new C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw,mc.thePlayer.rotationPitch,false));
                //  PacketUtil.sendSilent(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX,mc.thePlayer.posY,mc.thePlayer.posZ,
                //           mc.thePlayer.rotationYaw,mc.thePlayer.rotationPitch,false));
            }
        }
        if (stopwatch.finished(16600L)) {
            while (!packetQueue.isEmpty()) {
                PacketUtil.sendNoEvent(packetQueue.poll());
            }
            //     PacketUtil.sendSilent(new C03PacketPlayer.C05PacketPlayerLook(mc.thePlayer.rotationYaw,mc.thePlayer.rotationPitch,false));
            //     PacketUtil.sendSilent(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX,mc.thePlayer.posY,mc.thePlayer.posZ,
            //            mc.thePlayer.rotationYaw,mc.thePlayer.rotationPitch,false));
            PacketUtil.sendNoEvent(new C03PacketPlayer.C04PacketPlayerPosition());
            stopwatch.reset();
        }
        if(timeUntilFlag.finished(45000L)) {
            LocalDateTime now = LocalDateTime.now();

          //  ChatUtil.display("Might be flagging. Recommended to rejoin the server or change the world!! at the Time " + now.format(DateTimeFormatter.ofPattern("HH:mm")));
            // mc.timer.timerSpeed = 0.4f;
        }
    };
    @EventLink()
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        if (!packetQueue.isEmpty() && mc.thePlayer != null && mc.thePlayer.ticksExisted <= 11)
            packetQueue.clear();
        try {
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    packetQueue.add(event.getPacket());
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }
                if (event.getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer packetPlayer = (C03PacketPlayer) event.getPacket();
                    double x = mc.thePlayer.posX;
                    double y = mc.thePlayer.posY;
                    double z = mc.thePlayer.posZ;
                    float yaw = mc.thePlayer.rotationYaw;
                    float pitch = mc.thePlayer.rotationPitch;
                    final boolean ground = packetPlayer.onGround;

                    if (packetPlayer.isMoving()) {
                        x = packetPlayer.getPositionX();
                        y = packetPlayer.getPositionY();
                        z = packetPlayer.getPositionZ();
                    }

                    if (packetPlayer.getRotating()) {
                        yaw = packetPlayer.getYaw();
                        pitch = packetPlayer.getPitch();
                    }

                    if (mc.thePlayer.ticksExisted % 40 == 0) {
                        packetPlayer.y = -0.911F;
                        packetPlayer.onGround = false;
                    } else if (mc.thePlayer.ticksExisted % 4 != 0) {
                        event.setCancelled(true);
                    } else if (packetPlayer.getRotating() || yaw != verusYaw || pitch != verusPitch) {
                        this.verusYaw = packetPlayer.getYaw();
                        this.verusPitch = packetPlayer.getPitch();
                        event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(x, y, z, yaw, pitch, ground));
                    } else {
                        event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, ground));
                    }
                }

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    };
    @EventLink()
    public final Listener<PacketReceiveEvent> onPacketRecive = event -> {
        try {
            if (event.getPacket() instanceof S08PacketPlayerPosLook && mc.thePlayer.ticksExisted > 20) {
                ChatUtil.display("Silent on Tick: " + mc.thePlayer.ticksExisted);
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    };
}