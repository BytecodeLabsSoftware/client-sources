package com.polarware.module.impl.exploit.disabler;

import com.polarware.event.impl.network.PacketReceiveEvent;
import com.polarware.event.impl.other.TickEvent;
import com.polarware.module.impl.exploit.DisablerModule;
import com.polarware.event.bus.Listener;
import com.polarware.event.annotations.EventLink;
import com.polarware.event.impl.network.PacketSendEvent;
import com.polarware.util.chat.ChatUtil;
import com.polarware.util.packet.PacketUtil;
import com.polarware.value.Mode;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import util.time.StopWatch;

import java.util.concurrent.ConcurrentLinkedQueue;

public class VerusDisballer extends Mode<DisablerModule> {
    public VerusDisballer(String name, DisablerModule parent) {
        super(name, parent);
    }

    int verusSilentFlagValue;
    int VerusBufferSize = 300;
    int RepeatTimes = 1;
    int RepeatTimesFighting;
    int VerusFlagDelay = 35;
    private boolean verus2Stat = false;
    private boolean modified = false;

    StopWatch lagTimer = new StopWatch();

    public final ConcurrentLinkedQueue<Packet> packetBuffer = new ConcurrentLinkedQueue<>();

    @Override
    public void onEnable() {
        verus2Stat = false;
        lagTimer.reset();
        modified = false;
        packetBuffer.clear();
    }

    @EventLink()
    public final Listener<TickEvent> onPreMotionEvent = event -> {
        modified = false;
        RepeatTimes = 1;
        if (lagTimer.finished(490L)) {
            lagTimer.reset();
            if (!packetBuffer.isEmpty()) {
                Packet packet = packetBuffer.poll();
                for (int i = 0; i <= RepeatTimes; i++) {
                    PacketUtil.sendNoEvent(packet);
                }
            }
        }
    };

    @EventLink()
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        VerusFlagDelay = 35;
        VerusBufferSize = 300;
        Packet packet = event.getPacket();
        if (packet instanceof C0FPacketConfirmTransaction) {
            packetBuffer.add(packet);
            event.setCancelled(true);
            if (packetBuffer.size() > VerusBufferSize) {
                if (!verus2Stat) {
                    verus2Stat = true;
                    ChatUtil.display("Disabled :)");
                }
                Packet packeted = packetBuffer.poll();
                for (int i = 0; i <= RepeatTimes; i++) {
                    PacketUtil.sendNoEvent(packeted);
                }
            }
        } else if (packet instanceof C03PacketPlayer) {
            if ((mc.thePlayer.ticksExisted % VerusFlagDelay == 0) && (mc.thePlayer.ticksExisted > VerusFlagDelay + 1) && !modified) {
                modified = true;
                ((C03PacketPlayer) packet).setY(-30.111);
                ((C03PacketPlayer) packet).setOnGround(false);
            }
        }

    };

    @EventLink()
    public final Listener<PacketReceiveEvent> onPacketRecive = event -> {
        Packet packet = event.getPacket();
        if (packet instanceof S08PacketPlayerPosLook) {
            int x = (int) (((S08PacketPlayerPosLook) packet).getX() - mc.thePlayer.posX);
            int y = (int) (((S08PacketPlayerPosLook) packet).getY() - mc.thePlayer.posY);
            int z = (int) (((S08PacketPlayerPosLook) packet).getZ() - mc.thePlayer.posZ);
            int diff = (int) Math.sqrt(x * x + y * y + z * z);
            if (diff <= 8) {
                event.setCancelled(true);
                ChatUtil.display("Silent Flag");
                PacketUtil.sendNoEvent(
                        new C03PacketPlayer.C06PacketPlayerPosLook(
                                ((S08PacketPlayerPosLook) packet).getX(),
                                ((S08PacketPlayerPosLook) packet).getY(),
                                ((S08PacketPlayerPosLook) packet).getZ(),
                                ((S08PacketPlayerPosLook) packet).getYaw(),
                                ((S08PacketPlayerPosLook) packet).getPitch(),
                                true
                        )
                );
            }
        }
        if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 7) {
            lagTimer.reset();
            packetBuffer.clear();
        }
    };
}
