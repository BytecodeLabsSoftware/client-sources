package host.kix.uzi.module.modules.exploits;

import com.darkmagician6.eventapi.SubscribeEvent;

import com.darkmagician6.eventapi.types.EventType;
import host.kix.uzi.Uzi;
import host.kix.uzi.events.BlockClickedEvent;
import host.kix.uzi.events.RecievePacketEvent;
import host.kix.uzi.events.RenderWorldEvent;
import host.kix.uzi.events.UpdateEvent;
import host.kix.uzi.file.CustomFile;
import host.kix.uzi.module.Module;
import host.kix.uzi.utilities.minecraft.Stopwatch;
import host.kix.uzi.utilities.value.Value;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.item.ItemBlock;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C0APacketAnimation;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;
import org.lwjgl.opengl.GL11;

import java.io.*;

/**
 * Created by myche on 2/25/2017.
 */
public class CivBreak extends Module {

    private C07PacketPlayerDigging dig;
    private boolean shouldRender;
    private BlockPos pos;
    private static EnumFacing side;
    private final Stopwatch stopwatch = new Stopwatch();
    private Value<Boolean> placeBlocks = new Value("PlaceBlock", false);

    public CivBreak() {
        super("SivBreak", 0, Category.EXPLOITS);
        add(placeBlocks);
        Uzi.getInstance().getFileManager().addContent(new CustomFile("civbreak") {
            @Override
            public void loadFile() {
                try {
                    final BufferedReader reader = new BufferedReader(new FileReader(getFile()));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        final String[] arguments = line.split(":");
                        if (arguments.length == 2) {
                            final Value value = findGivenValue(arguments[0]);
                            if (value != null) {
                                if (value.getValue() instanceof Boolean) {
                                    value.setValue(Boolean.parseBoolean(arguments[1]));
                                } else if (value.getValue() instanceof Integer) {
                                    value.setValue(Integer.parseInt(arguments[1]));
                                } else if (value.getValue() instanceof Double) {
                                    value.setValue(Double.parseDouble(arguments[1]));
                                } else if (value.getValue() instanceof Float) {
                                    value.setValue(Float.parseFloat(arguments[1]));
                                } else if (value.getValue() instanceof Long) {
                                    value.setValue(Long.parseLong(arguments[1]));
                                } else if (value.getValue() instanceof String) {
                                    value.setValue(arguments[1]);
                                }
                            }
                        }
                    }
                    reader.close();
                } catch (final IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void saveFile() {
                try {
                    final BufferedWriter writer = new BufferedWriter(new FileWriter(
                            getFile()));
                    for (final Value val : getValues()) {
                        writer.write(val.getName().toLowerCase() + ":"
                                + val.getValue());
                        writer.newLine();
                    }
                    writer.close();
                } catch (final IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    @SubscribeEvent
    public void packet(RecievePacketEvent e) {
        C07PacketPlayerDigging packet;
        if (e.getPacket() instanceof C07PacketPlayerDigging && (CivBreak.this.dig == null || e.getPacket() != CivBreak.this.dig) && CivBreak.this.pos != null && (packet = (C07PacketPlayerDigging) e.getPacket()).func_180762_c() == C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
            CivBreak.this.dig = packet;
            CivBreak.this.shouldRender = true;
        }
    }

    @SubscribeEvent
    public void update(UpdateEvent e) {
        if (CivBreak.this.dig != null && CivBreak.access$300((CivBreak) CivBreak.this).thePlayer.getDistance(CivBreak.this.pos.getX(), CivBreak.this.pos.getY(), CivBreak.this.pos.getZ()) < (Double) 5.0 && CivBreak.this.stopwatch.hasCompleted(100) && CivBreak.this.pos != null) {
            float[] rotations = CivBreak.this.rotations(CivBreak.this.pos);
            if (e.type == EventType.PRE) {
                e.yaw = this.wrapAngleTo180(rotations[0]);
                e.pitch = this.wrapAngleTo180(rotations[1]);
            }
            if (e.type == EventType.POST) {
                CivBreak.access$700((CivBreak) CivBreak.this).thePlayer.sendQueue.addToSendQueue(new C0APacketAnimation());
                CivBreak.access$800((CivBreak) CivBreak.this).thePlayer.sendQueue.addToSendQueue(CivBreak.this.dig);
                if (((Boolean) CivBreak.this.placeBlocks.getValue()).booleanValue() && !(CivBreak.access$1000((CivBreak) CivBreak.this).thePlayer.getHeldItem().getItem() instanceof ItemBlock)) {
                    CivBreak.access$1200((CivBreak) CivBreak.this).thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(CivBreak.this.pos, -1, CivBreak.access$1100((CivBreak) CivBreak.this).thePlayer.getCurrentEquippedItem(), 0.0f, 0.0f, 0.0f));
                }
                CivBreak.this.stopwatch.reset();
            }
        }

    }

    @SubscribeEvent
    public void render(RenderWorldEvent e) {
        if (CivBreak.this.pos == null || side == null) {
            return;
        }
        if (CivBreak.this.pos != null && CivBreak.this.shouldRender) {
            enableGL3D();
            double x = (double) CivBreak.this.pos.getX() - CivBreak.access$1600((CivBreak) CivBreak.this).getRenderManager().viewerPosX;
            double y = (double) CivBreak.this.pos.getY() - CivBreak.access$1700((CivBreak) CivBreak.this).getRenderManager().viewerPosY;
            double z = (double) CivBreak.this.pos.getZ() - CivBreak.access$1800((CivBreak) CivBreak.this).getRenderManager().viewerPosZ;
            AxisAlignedBB boundingBox = AxisAlignedBB.fromBounds(x, y, z, x + 1.0, y + 1.0, z + 1.0);
            GlStateManager.color(1.0f, 1.0f, 0.0f, 0.3f);
            RenderGlobal.drawOutlinedBoundingBox(boundingBox, -1);
            GlStateManager.color(1.0f, 1.0f, 0.0f, 0.2f);
            drawBox(boundingBox);
            disableGL3D();
        }
    }

    public static void enableGL3D() {
        GL11.glDisable((int) 3008);
        GL11.glEnable((int) 3042);
        GL11.glBlendFunc((int) 770, (int) 771);
        GL11.glDisable((int) 3553);
        GL11.glDisable((int) 2929);
        GL11.glDepthMask((boolean) false);
        GL11.glEnable((int) 2884);
        GL11.glEnable((int) 2848);
        GL11.glHint((int) 3154, (int) 4353);
        GL11.glDisable((int) 2896);
    }

    public static void disableGL3D() {
        GL11.glEnable((int) 2896);
        GL11.glDisable((int) 2848);
        GL11.glEnable((int) 3553);
        GL11.glEnable((int) 2929);
        GL11.glDisable((int) 3042);
        GL11.glEnable((int) 3008);
        GL11.glDepthMask((boolean) true);
        GL11.glCullFace((int) 1029);
    }


    public static float wrapAngleTo180(float angle) {
        if ((angle %= 360.0f) >= 180.0f) {
            angle -= 360.0f;
        }
        if (angle < -180.0f) {
            angle += 360.0f;
        }
        return angle;
    }

    @SubscribeEvent
    public void breakBlock(BlockClickedEvent e) {
        CivBreak.this.pos = e.getBlockPos();
        side = e.getEnumFacing();
        CivBreak.access$1400((CivBreak) CivBreak.this).thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, CivBreak.this.pos, side));
        CivBreak.access$1500((CivBreak) CivBreak.this).thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, CivBreak.this.pos, side));
    }

    @Override
    public void onDisable() {
        super.onDisable();
        this.pos = null;
        this.dig = null;
        side = null;
        this.shouldRender = false;
    }

    public static void drawBox(AxisAlignedBB box) {
        if (box == null) {
            return;
        }
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.minZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.minZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.minZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.minZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.maxY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.maxY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.maxZ);
        GL11.glEnd();
        GL11.glBegin((int) 7);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.minZ);
        GL11.glVertex3d((double) box.minX, (double) box.minY, (double) box.maxZ);
        GL11.glVertex3d((double) box.maxX, (double) box.minY, (double) box.maxZ);
        GL11.glEnd();
    }

    public float[] rotations(BlockPos pos) {
        double x = (double) pos.getX() + 0.5 - this.mc.thePlayer.posX;
        double y = (double) pos.getZ() + 0.5 - this.mc.thePlayer.posZ;
        double z = (double) pos.getY() + 0.5 - (this.mc.thePlayer.posY + (double) this.mc.thePlayer.getEyeHeight());
        double var14 = MathHelper.sqrt_double(x * x + y * y);
        float yaw = (float) (Math.atan2(y, x) * 180.0 / 3.141592653589793) - 90.0f;
        float pitch = (float) (-Math.atan2(z, var14) * 180.0 / 3.141592653589793);
        return new float[]{yaw, pitch};
    }


    static /* synthetic */ Minecraft access$300(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$700(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$800(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1000(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1100(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1200(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1400(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1500(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1600(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1700(CivBreak civ) {
        return civ.mc;
    }

    static /* synthetic */ Minecraft access$1800(CivBreak civ) {
        return civ.mc;
    }

}
