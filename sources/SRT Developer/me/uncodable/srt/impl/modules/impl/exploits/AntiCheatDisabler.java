package me.uncodable.srt.impl.modules.impl.exploits;

import java.util.ArrayList;
import java.util.Random;
import me.uncodable.srt.Ries;
import me.uncodable.srt.impl.events.api.EventTarget;
import me.uncodable.srt.impl.events.events.entity.EventLivingUpdate;
import me.uncodable.srt.impl.events.events.entity.EventMotionUpdate;
import me.uncodable.srt.impl.events.events.packet.EventPacket;
import me.uncodable.srt.impl.events.events.peripheral.EventKeyPress;
import me.uncodable.srt.impl.events.events.render.Event2DRender;
import me.uncodable.srt.impl.modules.api.Module;
import me.uncodable.srt.impl.modules.api.ModuleInfo;
import me.uncodable.srt.impl.modules.api.settings.Setting;
import me.uncodable.srt.impl.utils.MovementUtils;
import me.uncodable.srt.impl.utils.PacketUtils;
import me.uncodable.srt.impl.utils.Timer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C18PacketSpectate;
import org.apache.commons.lang3.RandomUtils;
import store.intent.intentguard.annotation.Native;

@ModuleInfo(
   internalName = "Disabler",
   name = "Anti-Cheat Disabler",
   desc = "Allows you to *literally* handicap an entire anti-cheat.",
   category = Module.Category.EXPLOIT,
   exp = true
)
public class AntiCheatDisabler extends Module {
   private static final String COMBO_BOX_SETTING_NAME = "Disabler Mode";
   private static final String SRT = "SRT Multi-Disabler";
   private static final String LEGACY_SRT = "Legacy SRT Multi-Disabler";
   private static final String VOID_TELEPORT = "Void Teleport";
   private static final String LEGACY_VERUS = "Legacy Verus";
   private static final String LEGACY_VERUS_II = "Legacy Verus II";
   private static final String LEGACY_VERUS_III = "Legacy Verus III";
   private static final String LEGACY_VERUS_IV = "Legacy Verus IV";
   private static final String LEGACY_VERUS_V = "Legacy Verus V";
   private static final String PVP_LAND = "PvP Land";
   private static final String VERUS_COMBAT = "Verus Combat";
   private static final String LEGACY_AGC_COMBAT = "Legacy AntiGamingChair Combat";
   private static final String JI_DAMAGE = "JI Janitor Damage";
   private static final String NORULES = "No Rules Partial";
   private static final String RESPAWN = "Respawn";
   private static final String FORCE_POSITION_LOOK = "Force Position Look";
   private static final String SELF_SPECTATE = "Self-Spectate";
   private static final String LEGACY_AGC_FULL = "Legacy AntiGamingChair Full";
   private static final String LEGACY_TROJAN = "Legacy Trojan";
   private static final String AGC_ASCENSION = "AntiGamingChair Ascension";
   private static final String UNKNOWN = "Unknown";
   private static final String GUARDIAN = "Guardian";
   private static final String VERUS_EXPERIMENTAL = "Verus Experimental";
   private static final String CARBON = "Carbon";
   private static final String AREA_51 = "Area 51";
   private static final String WATCHDOG = "Watchdog";
   private final ArrayList<C0FPacketConfirmTransaction> transactions = new ArrayList<>();
   private final ArrayList<C00PacketKeepAlive> keepAlives = new ArrayList<>();
   private final ArrayList<C03PacketPlayer> players = new ArrayList<>();
   private int packetCounter;
   private int stage;
   private final Timer timer = new Timer();
   private final Timer timer2 = new Timer();
   private boolean sentFirstC00;
   private boolean pvpLandToggle;
   private boolean sendHub;
   private float oldTimerSpeed;
   private double x;
   private double y;
   private double z;
   private final Random random = new Random();

   public AntiCheatDisabler(int key, boolean enabled) {
      super(key, enabled);
      Ries.INSTANCE
         .getSettingManager()
         .addComboBox(
            this,
            "INTERNAL_GENERAL_COMBO_BOX",
            "Disabler Mode",
            "SRT Multi-Disabler",
            "Void Teleport",
            "Verus Combat",
            "Legacy Verus",
            "Legacy Verus II",
            "Legacy Verus III",
            "Legacy Verus IV",
            "Legacy Verus V",
            "Verus Experimental",
            "Watchdog",
            "PvP Land",
            "Legacy AntiGamingChair Combat",
            "JI Janitor Damage",
            "No Rules Partial",
            "Respawn",
            "Force Position Look",
            "Self-Spectate",
            "Legacy AntiGamingChair Full",
            "Legacy Trojan",
            "AntiGamingChair Ascension",
            "Carbon",
            "Guardian",
            "Unknown",
            "Area 51"
         );
   }

   @Override
   public void onEnable() {
      if (MC.thePlayer != null) {
         String var1 = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
         switch(var1) {
            case "Verus Experimental":
            case "Legacy Verus V":
               if (!MC.thePlayer.onGround || Ries.INSTANCE.getModuleManager().getModuleByName("AirJump").isEnabled()) {
                  Ries.INSTANCE.msg("You must be on ground to toggle this anti-cheat disabler.");
                  this.toggle();
               }
         }

         this.oldTimerSpeed = MC.timer.timerSpeed;
         this.x = MC.thePlayer.posX;
         this.y = MC.thePlayer.posY;
         this.z = MC.thePlayer.posZ;
      }
   }

   @Override
   public void onDisable() {
      this.transactions.clear();
      this.keepAlives.clear();
      this.players.forEach(packet -> MC.thePlayer.sendQueue.addToSendQueue(packet));
      this.players.clear();
      this.timer.reset();
      this.timer2.reset();
      this.packetCounter = this.stage = 0;
      this.x = this.y = this.z = 0.0;
      this.sentFirstC00 = this.pvpLandToggle = this.sendHub = false;
      MC.timer.timerSpeed = this.oldTimerSpeed;
   }

   @EventTarget(
      target = EventKeyPress.class
   )
   public void onUpdate(EventKeyPress e) {
      String var2 = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
      byte var3 = -1;
      switch(var2.hashCode()) {
         case 1659370881:
            if (var2.equals("PvP Land")) {
               var3 = 0;
            }
         default:
            switch(var3) {
               case 0:
                  if (e.getKey() == 29) {
                     this.pvpLandToggle = !this.pvpLandToggle;
                     if (!this.pvpLandToggle && !this.sendHub) {
                        MC.thePlayer.sendChatMessage("/hub");
                        this.sendHub = true;
                     }
                  }
            }
      }
   }

   @EventTarget(
      target = EventMotionUpdate.class
   )
   @Native
   public void onMotion(EventMotionUpdate e) {
      String mode = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
      if (e.getState() == EventMotionUpdate.State.PRE) {
         switch(mode) {
            case "SRT Multi-Disabler":
               if (this.timer.elapsed(5000L)) {
                  if (this.keepAlives.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                  }

                  if (this.transactions.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                  }

                  ++this.packetCounter;
                  this.timer.reset();
               }
               break;
            case "Legacy Verus III":
               if (this.packetCounter == 0) {
                  MovementUtils.zeroMotion();
               } else if (this.packetCounter > 0 && MC.thePlayer.ticksExisted % 20 == 0) {
                  e.setPosY(0.0);
                  e.setOnGround(false);
               }

               if (MC.thePlayer.ticksExisted % 200 == 0) {
                  if (this.transactions.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                  }

                  if (this.keepAlives.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                  }

                  ++this.packetCounter;
                  Ries.INSTANCE.msg("counter increased, count: " + this.packetCounter);
               }
               break;
            case "Legacy Verus IV":
               MC.timer.timerSpeed = 0.4F;
               if (MC.thePlayer.ticksExisted % 5 == 0) {
                  MC.thePlayer
                     .sendQueue
                     .packetNoEvent(
                        new C03PacketPlayer.C04PacketPlayerPosition(MC.thePlayer.posX, MC.thePlayer.posY - 12.0, MC.thePlayer.posZ, MC.thePlayer.onGround)
                     );
               }
            case "Legacy Verus II":
            case "Legacy Verus":
               if (this.timer.elapsed(6000L)) {
                  if (this.transactions.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter++));
                  }

                  this.timer.reset();
               }
               break;
            case "PvP Land":
               if (!this.pvpLandToggle) {
                  if (!this.transactions.isEmpty()) {
                     this.transactions.forEach(packet -> MC.thePlayer.sendQueue.packetNoEvent(packet));
                     this.transactions.clear();
                  }

                  if (!this.keepAlives.isEmpty()) {
                     this.keepAlives.forEach(packet -> MC.thePlayer.sendQueue.packetNoEvent(packet));
                     this.keepAlives.clear();
                  }
               }
               break;
            case "Legacy AntiGamingChair Full":
            case "Void Teleport":
               if (MC.thePlayer.ticksExisted % 20 == 0) {
                  e.setPosY(0.0);
                  e.setOnGround(false);
               }
               break;
            case "Verus Combat":
               if (this.timer.elapsed(10000L)) {
                  if (this.transactions.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter++));
                  }

                  this.timer.reset();
               }
               break;
            case "JI Janitor Damage":
               if (MC.thePlayer.hurtTime == 0) {
                  for(int i = 0; i < 8; ++i) {
                     MC.thePlayer
                        .sendQueue
                        .addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MC.thePlayer.posX, MC.thePlayer.posY + 0.42F, MC.thePlayer.posZ, false));
                     MC.thePlayer
                        .sendQueue
                        .addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MC.thePlayer.posX, MC.thePlayer.posY, MC.thePlayer.posZ, false));
                  }

                  MC.thePlayer
                     .sendQueue
                     .addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(MC.thePlayer.posX, MC.thePlayer.posY, MC.thePlayer.posZ, true));
               }
               break;
            case "Respawn":
               MC.thePlayer.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
               break;
            case "Legacy Trojan":
               if (this.transactions.size() >= 300) {
                  this.transactions.forEach(packet -> MC.thePlayer.sendQueue.packetNoEvent(packet));
                  this.transactions.clear();
               }
               break;
            case "Guardian":
               MC.timer.timerSpeed = 0.25F;
               break;
            case "Self-Spectate":
               MC.thePlayer.sendQueue.packetNoEvent(new C18PacketSpectate(MC.thePlayer.getUniqueID()));
               break;
            case "Legacy Verus V":
               if (this.packetCounter < 2) {
                  MC.thePlayer.setPositionAndUpdate(this.x, this.y, this.z);
               } else {
                  MC.timer.timerSpeed = 0.4F;
               }

               if (MC.thePlayer.ticksExisted % 200 == 0) {
                  if (this.packetCounter < 2) {
                     Ries.INSTANCE.msg(String.format("packetCount %d...", this.packetCounter));
                     MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                     MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                     ++this.packetCounter;
                  } else {
                     this.transactions.clear();
                     this.keepAlives.clear();
                     Ries.INSTANCE.msg("froze ping");
                  }
               }
               break;
            case "Verus Experimental":
               if (this.packetCounter < 2) {
                  MC.thePlayer.setPositionAndUpdate(this.x, this.y, this.z);
               }

               if (this.timer.elapsed(10000L) && this.packetCounter < 2) {
                  if (this.transactions.size() - 1 >= this.packetCounter) {
                     MC.thePlayer.sendQueue.packetNoEvent(this.transactions.get(this.packetCounter));
                     MC.thePlayer.sendQueue.packetNoEvent(this.keepAlives.get(this.packetCounter));
                     ++this.packetCounter;
                  }

                  this.timer.reset();
               }

               if (MovementUtils.isMoving2()) {
                  ++this.stage;
               }

               if (this.stage > 10) {
                  this.stage = 0;
                  this.x = MC.thePlayer.posX;
                  this.z = MC.thePlayer.posZ;
               }
               break;
            case "Carbon":
               MC.timer.timerSpeed = 0.1F;
               if (MC.thePlayer.ticksExisted % 100 == 0) {
                  this.players.forEach(player -> MC.thePlayer.sendQueue.packetNoEvent(player));
                  this.players.clear();
               }
            case "Watchdog":
         }
      }
   }

   @EventTarget(
      target = EventLivingUpdate.class
   )
   @Native
   public void onLiving(EventLivingUpdate e) {
      String var2 = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
      byte var3 = -1;
      switch(var2.hashCode()) {
         case -816747895:
            if (var2.equals("SRT Multi-Disabler")) {
               var3 = 0;
            }
         default:
            switch(var3) {
               case 0:
                  MC.thePlayer.sendPlayerAbilities();
            }
      }
   }

   @EventTarget(
      target = EventPacket.class
   )
   @Native
   public void onPacket(EventPacket e) {
      String var2 = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
      switch(var2) {
         case "Verus Experimental":
            if (e.getPacket() instanceof C00PacketKeepAlive) {
               if (this.packetCounter < 2) {
                  this.keepAlives.add(PacketUtils.getPacket(e.getPacket()));
               }

               e.setCancelled(true);
            } else if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               if (this.packetCounter < 2) {
                  this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               }

               e.setCancelled(true);
            } else if (e.getPacket() instanceof C03PacketPlayer) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               if (this.stage < 6) {
                  MC.thePlayer.lastTickPosX = MC.thePlayer.prevPosX = MC.thePlayer.posX = this.x;
                  MC.thePlayer.lastTickPosZ = MC.thePlayer.prevPosZ = MC.thePlayer.posZ = this.z;
                  if (this.stage % 2 == 0) {
                     packet.setY(packet.getPositionY() + 1.1);
                  }

                  packet.setOnGround(false);
               } else if (this.stage == 7) {
                  packet.setOnGround(true);
               }
            }
            break;
         case "SRT Multi-Disabler":
            if (e.getPacket() instanceof C03PacketPlayer) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               if (MC.thePlayer.ticksExisted % 4 == 0) {
                  MovementUtils.zeroMotion();
                  MC.timer.timerSpeed = 0.3F;
                  packet.setY(
                     (double)(
                        (int)(
                           packet.getY()
                              + (
                                 this.random.nextBoolean()
                                    ? MC.thePlayer.posY + (double)RandomUtils.nextInt(1000, 10000)
                                    : MC.thePlayer.posY - (double)RandomUtils.nextInt(1000, 10000)
                              )
                        )
                     )
                  );
                  packet.setX(
                     (double)(
                        (int)(
                           this.random.nextBoolean()
                              ? MC.thePlayer.posX + (double)RandomUtils.nextInt(5, 1000)
                              : MC.thePlayer.posX - (double)RandomUtils.nextInt(5, 1000)
                        )
                     )
                  );
                  packet.setZ(
                     (double)(
                        (int)(
                           this.random.nextBoolean()
                              ? MC.thePlayer.posZ + (double)RandomUtils.nextInt(5, 1000)
                              : MC.thePlayer.posZ - (double)RandomUtils.nextInt(5, 1000)
                        )
                     )
                  );
               } else {
                  MC.timer.timerSpeed = 0.6F;
                  packet.setY((double)((int)packet.getY()));
               }

               MC.thePlayer
                  .sendQueue
                  .packetNoEvent(
                     new C0CPacketInput(MC.thePlayer.moveStrafing, MC.thePlayer.moveForward, MC.thePlayer.movementInput.jump, MC.thePlayer.movementInput.sneak)
                  );
            } else if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               e.setCancelled(true);
            } else if (e.getPacket() instanceof C00PacketKeepAlive) {
               if (!this.sentFirstC00) {
                  this.sentFirstC00 = true;
               } else {
                  this.keepAlives.add(PacketUtils.getPacket(e.getPacket()));
                  e.setCancelled(true);
               }
            } else if (e.getPacket() instanceof C0BPacketEntityAction) {
               C0BPacketEntityAction packet = PacketUtils.getPacket(e.getPacket());
               e.setCancelled(
                  packet.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING
                     || packet.getAction() == C0BPacketEntityAction.Action.START_SPRINTING
                     || packet.getAction() == C0BPacketEntityAction.Action.START_SNEAKING
                     || packet.getAction() == C0BPacketEntityAction.Action.STOP_SNEAKING
               );
            } else if (e.getPacket() instanceof C13PacketPlayerAbilities) {
               C13PacketPlayerAbilities packet = PacketUtils.getPacket(e.getPacket());
               packet.setCreativeMode(true);
               packet.setAllowFlying(true);
               packet.setFlying(true);
               packet.setInvulnerable(true);
               packet.setWalkSpeed(Float.MAX_VALUE);
               packet.setFlySpeed(Float.MAX_VALUE);
            }
            break;
         case "PvP Land":
            if (this.pvpLandToggle) {
               this.sendHub = false;
               if (e.getPacket() instanceof C00PacketKeepAlive) {
                  this.keepAlives.add(PacketUtils.getPacket(e.getPacket()));
                  e.setCancelled(true);
               } else if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                  this.transactions.add(PacketUtils.getPacket(e.getPacket()));
                  e.setCancelled(true);
               }
            }
            break;
         case "Legacy Verus II":
            if (e.getPacket() instanceof C03PacketPlayer && this.timer2.elapsed(1000L)) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               packet.setY(MC.thePlayer.posY - RandomUtils.nextDouble(11.0, 15.0));
               this.timer2.reset();
            }
         case "Legacy Verus":
            if (e.getPacket() instanceof C03PacketPlayer) {
               MC.thePlayer.sendQueue.packetNoEvent(new C0CPacketInput());
            } else if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               e.setCancelled(true);
            } else if (e.getPacket() instanceof C0BPacketEntityAction) {
               C0BPacketEntityAction packet = PacketUtils.getPacket(e.getPacket());
               e.setCancelled(
                  packet.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING || packet.getAction() == C0BPacketEntityAction.Action.START_SPRINTING
               );
            }
            break;
         case "Legacy Verus IV":
         case "Legacy Verus III":
            if (e.getPacket() instanceof C00PacketKeepAlive) {
               this.keepAlives.add(PacketUtils.getPacket(e.getPacket()));
               e.setCancelled(true);
            } else if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               e.setCancelled(true);
            } else if (e.getPacket() instanceof C03PacketPlayer) {
               MC.thePlayer.sendQueue.packetNoEvent(new C0CPacketInput());
            }
            break;
         case "Legacy AntiGamingChair Combat":
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               C0FPacketConfirmTransaction packet = PacketUtils.getPacket(e.getPacket());
               packet.setUid((short)0);
               packet.setWindowId(0);
            }
            break;
         case "Verus Combat":
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               e.setCancelled(true);
            }
            break;
         case "No Rules Partial":
            e.setCancelled(e.getPacket() instanceof C03PacketPlayer && MC.thePlayer.ticksExisted % 2 == 0);
            break;
         case "Force Position Look":
            if (e.getPacket() instanceof C03PacketPlayer) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               e.setPacket(
                  new C03PacketPlayer.C06PacketPlayerPosLook(
                     packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.getYaw(), packet.getPitch(), packet.isOnGround()
                  )
               );
            }
            break;
         case "Legacy AntiGamingChair Full":
            if (e.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               MC.thePlayer
                  .sendQueue
                  .packetNoEvent(
                     new C03PacketPlayer.C04PacketPlayerPosition(packet.getPositionX(), packet.getPositionY(), packet.getPositionZ(), packet.isOnGround())
                  );
               e.setCancelled(true);
            }
            break;
         case "Unknown":
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               C0FPacketConfirmTransaction packet = PacketUtils.getPacket(e.getPacket());
               Ries.INSTANCE.msg("I fucking hate this community: u=" + packet.getUid() + ", i=" + packet.getWindowId() + ", a=" + packet.isAccepted());
               e.setCancelled(MovementUtils.isMoving());
            }
            break;
         case "Legacy Trojan":
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               e.setCancelled(true);
            }

            if (e.getPacket() instanceof C03PacketPlayer) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               packet.setOnGround(true);
               if (this.transactions.size() < 300 && this.transactions.size() % 30 == 0) {
                  packet.setY(packet.getPositionY() - RandomUtils.nextDouble(10.1, 11.0));
               }

               packet.setY((double)((int)packet.getPositionY()));
            }
            break;
         case "AntiGamingChair Ascension":
            if (e.getPacket() instanceof C00PacketKeepAlive) {
               try {
                  Thread.sleep(5000L);
               } catch (Exception var5) {
                  var5.printStackTrace();
               }
            }
            break;
         case "Guardian":
            if (e.getPacket() instanceof C03PacketPlayer && MC.thePlayer.ticksExisted % 5 == 0) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               packet.setY(packet.getPositionY() - (double)RandomUtils.nextFloat(10.0F, 10.3F));
            }
            break;
         case "Legacy Verus V":
            if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
               if (this.packetCounter < 2) {
                  this.transactions.add(PacketUtils.getPacket(e.getPacket()));
               }

               e.setCancelled(true);
            } else if (e.getPacket() instanceof C00PacketKeepAlive) {
               if (this.packetCounter < 2) {
                  this.keepAlives.add(PacketUtils.getPacket(e.getPacket()));
               }

               e.setCancelled(true);
            } else if (e.getPacket() instanceof C03PacketPlayer && this.packetCounter >= 2 && MC.thePlayer.ticksExisted % 5 == 0) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               packet.setY(packet.getPositionY() / 2.0);
               packet.setOnGround(false);
            }
            break;
         case "Carbon":
            if (e.getPacket() instanceof C03PacketPlayer && MC.thePlayer.ticksExisted % 100 != 0) {
               C03PacketPlayer packet = PacketUtils.getPacket(e.getPacket());
               this.players.add(packet);
               e.setCancelled(true);
            }
            break;
         case "Area 51":
            if (e.getPacket() instanceof C00PacketKeepAlive) {
               C00PacketKeepAlive packet = PacketUtils.getPacket(e.getPacket());
               packet.setKey(packet.getKey() - 1);
            }
      }
   }

   @EventTarget(
      target = Event2DRender.class
   )
   public void onRender(Event2DRender e) {
      String var2 = Ries.INSTANCE.getSettingManager().getSetting(this, "INTERNAL_GENERAL_COMBO_BOX", Setting.Type.COMBO_BOX).getCurrentCombo();
      byte var3 = -1;
      switch(var2.hashCode()) {
         case 1659370881:
            if (var2.equals("PvP Land")) {
               var3 = 0;
            }
         default:
            switch(var3) {
               case 0:
                  MC.fontRendererObj
                     .drawStringWithShadow(
                        String.format("Press Left CTRL to %s the PvP Land disabler.", this.pvpLandToggle ? "disable" : "enable"),
                        (float)e.getScaledResolution().getScaledWidth() / 2.0F - 130.0F,
                        (float)e.getScaledResolution().getScaledHeight() / 2.0F - 15.0F,
                        16777215
                     );
            }
      }
   }
}
