package io.github.liticane.clients.feature.module.impl.exploit;

import io.github.liticane.clients.feature.event.api.EventListener;
import io.github.liticane.clients.feature.event.api.annotations.SubscribeEvent;
import io.github.liticane.clients.feature.event.impl.other.PacketEvent;
import io.github.liticane.clients.feature.event.impl.other.TickEvent;
import io.github.liticane.clients.feature.module.Module;
import io.github.liticane.clients.util.misc.ChatUtil;
import io.github.liticane.clients.util.player.InventoryUtils;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityMinecart;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S01PacketJoinGame;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S1BPacketEntityAttach;

import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

@Module.Info(name = "GodMode", category = Module.Category.EXPLOIT)
public class GodMode extends Module{
    private Map<Integer, Queue<Packet<?>>> queue  = new HashMap<Integer, Queue<Packet<?>>>();

    public int currTick = 0;
    public int leftTick = 0;
    private boolean waitingForReset = false;
    public int keepAliveTick = 0;
    public long displayTime = 0L;
    public boolean last = false;

    @Override
    public void onEnable() {
        this.currTick = 0;
        this.leftTick = 0;
        this.waitingForReset = false;
        this.queue.clear();
        ChatUtil.display("Place two Boats then right click on them || also all credits goes to the rektsky devs for making the godmode");
        super.onEnable();
    }

    @SubscribeEvent
    private final EventListener<TickEvent> onTick = e -> {
        setSuffix("PacketSpam");
        ++this.currTick;
        if (this.mc.player.ridingEntity != null) {
            for (final Entity entity : this.mc.world.getLoadedEntityList()) {
                if (entity instanceof EntityMinecart) {
                    final double deltaX = entity.posX - this.mc.player.posX;
                    final double deltaY = entity.posY - this.mc.player.posY;
                    final double deltaZ = entity.posZ - this.mc.player.posZ;
                    if (Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) >= 5.0) {
                        continue;
                    }
                    this.mc.timer.timerSpeed = 0.5f;

                    if (entity == this.mc.player.ridingEntity) {
                        continue;
                    }
                    int item = -1;
                    double highest = 0.0;
                    for (int i = 36; i < 45; ++i) {
                        if (this.mc.player.inventoryContainer.getSlot(i).getStack() != null && InventoryUtils.getItemDamage(this.mc.player.inventoryContainer.getSlot(i).getStack()) > highest) {
                            highest = InventoryUtils.getItemDamage(this.mc.player.inventoryContainer.getSlot(i).getStack());
                            item = i - 36;
                        }
                    }
                    if (highest == 0.0) {
                        item = -1;
                    }
                    if (item == -1) {
                        ChatUtil.display("You need to hold a better weapon");

                        return;
                    }
                    if (item != this.mc.player.inventory.currentItem) {
                        this.mc.player.inventory.currentItem = item;
                        return;
                    }
                    if (this.mc.player.getCurrentEquippedItem() == null || InventoryUtils.getItemDamage(this.mc.player.getCurrentEquippedItem()) < 4.0) {
                        ChatUtil.display("You need to hold a better weapon");

                        return;
                    }

                    mc.player.rotationPitch = 90.0f;
                    this.mc.player.swing();
                    this.mc.controller.attackEntity((EntityPlayer)this.mc.player, this.mc.player.ridingEntity);
                    this.mc.player.swing();
                    this.mc.controller.attackEntity((EntityPlayer)this.mc.player, entity);
                }
            }
        }
        
    };

    @SubscribeEvent
    private final EventListener<PacketEvent> onpacketo = event -> {
        if (event.getPacket() instanceof S07PacketRespawn || event.getPacket() instanceof S01PacketJoinGame) {
            this.queue.clear();
            this.currTick = 0;
            this.waitingForReset = false;
        }
        if (event.getPacket() instanceof S13PacketDestroyEntities) {
            if (((S13PacketDestroyEntities)event.getPacket()).getEntityIDs().length != 1) {
                for (final int entityID : ((S13PacketDestroyEntities)event.getPacket()).getEntityIDs()) {
                    if (entityID == this.mc.player.ridingEntity.getEntityId()) {
                        this.mc.timer.timerSpeed = 1.0f;
                        ChatUtil.display("Succes");
                        this.waitingForReset = true;
                    }
                }
            }
            else {
                for (final int entityID : ((S13PacketDestroyEntities)event.getPacket()).getEntityIDs()) {
                    if (entityID == this.mc.player.ridingEntity.getEntityId()) {
                        ChatUtil.display("Activation Failed");

                        this.displayTime = System.currentTimeMillis();
                        for (int i = 0; i < 20; ++i) {

                            ChatUtil.display("FAILED");

                        }
                    }
                }
            }
        }
        if (event.getPacket() instanceof S1BPacketEntityAttach && ((S1BPacketEntityAttach)event.getPacket()).getEntityId() == this.mc.player.getEntityId() && ((S1BPacketEntityAttach)event.getPacket()).getVehicleEntityId() > 0) {
            this.currTick = 0;
        }
        if (event.getPacket() instanceof C03PacketPlayer) {
            if (this.mc.player.isRiding()) {
                ((C03PacketPlayer)event.getPacket()).onGround = false;
            }
            if (this.waitingForReset) {
                ((C03PacketPlayer)event.getPacket()).onGround = false;
            }
            if (!this.mc.player.isRiding() || this.mc.player.ridingEntity == null || this.currTick <= 50) {}
            if (this.mc.player.getHealth() >= 19.0f || !this.waitingForReset || this.mc.player.isDead || this.mc.player.onGround) {}
        }
        
    };
}
